{"version":3,"file":"bundle.js","sources":["../../node_modules/svelte/internal/index.mjs","../../src/generic/strings.ts","../../src/categories/stadiums/data.ts","../../src/generic/utils.ts","../../src/generic/storage.ts","../../src/generic/QuestionSetHandler.ts","../../src/categories/stadiums/StadiumQuestionSetHandler.ts","../../src/generic/Results.svelte","../../src/generic/Settings.svelte","../../src/generic/TopBar.svelte","../../src/generic/Content.svelte","../../src/categories/stadiums/StadiumsApp.svelte","../../src/generic/generichandlers/GenericQuestionSetHandler.ts","../../src/generic/generichandlers/GenericImageQuestionSetHandler.ts","../../src/generic/generichandlers/GenericImageApp.svelte","../../src/generic/generichandlers/GenericStringApp.svelte","../../src/categories/FivesomesApp.svelte","../../src/App.svelte","../../src/main.ts"],"sourcesContent":["function noop() { }\nconst identity = x => x;\nfunction assign(tar, src) {\n    // @ts-ignore\n    for (const k in src)\n        tar[k] = src[k];\n    return tar;\n}\nfunction is_promise(value) {\n    return value && typeof value === 'object' && typeof value.then === 'function';\n}\nfunction add_location(element, file, line, column, char) {\n    element.__svelte_meta = {\n        loc: { file, line, column, char }\n    };\n}\nfunction run(fn) {\n    return fn();\n}\nfunction blank_object() {\n    return Object.create(null);\n}\nfunction run_all(fns) {\n    fns.forEach(run);\n}\nfunction is_function(thing) {\n    return typeof thing === 'function';\n}\nfunction safe_not_equal(a, b) {\n    return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\nlet src_url_equal_anchor;\nfunction src_url_equal(element_src, url) {\n    if (!src_url_equal_anchor) {\n        src_url_equal_anchor = document.createElement('a');\n    }\n    src_url_equal_anchor.href = url;\n    return element_src === src_url_equal_anchor.href;\n}\nfunction not_equal(a, b) {\n    return a != a ? b == b : a !== b;\n}\nfunction is_empty(obj) {\n    return Object.keys(obj).length === 0;\n}\nfunction validate_store(store, name) {\n    if (store != null && typeof store.subscribe !== 'function') {\n        throw new Error(`'${name}' is not a store with a 'subscribe' method`);\n    }\n}\nfunction subscribe(store, ...callbacks) {\n    if (store == null) {\n        return noop;\n    }\n    const unsub = store.subscribe(...callbacks);\n    return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;\n}\nfunction get_store_value(store) {\n    let value;\n    subscribe(store, _ => value = _)();\n    return value;\n}\nfunction component_subscribe(component, store, callback) {\n    component.$$.on_destroy.push(subscribe(store, callback));\n}\nfunction create_slot(definition, ctx, $$scope, fn) {\n    if (definition) {\n        const slot_ctx = get_slot_context(definition, ctx, $$scope, fn);\n        return definition[0](slot_ctx);\n    }\n}\nfunction get_slot_context(definition, ctx, $$scope, fn) {\n    return definition[1] && fn\n        ? assign($$scope.ctx.slice(), definition[1](fn(ctx)))\n        : $$scope.ctx;\n}\nfunction get_slot_changes(definition, $$scope, dirty, fn) {\n    if (definition[2] && fn) {\n        const lets = definition[2](fn(dirty));\n        if ($$scope.dirty === undefined) {\n            return lets;\n        }\n        if (typeof lets === 'object') {\n            const merged = [];\n            const len = Math.max($$scope.dirty.length, lets.length);\n            for (let i = 0; i < len; i += 1) {\n                merged[i] = $$scope.dirty[i] | lets[i];\n            }\n            return merged;\n        }\n        return $$scope.dirty | lets;\n    }\n    return $$scope.dirty;\n}\nfunction update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn) {\n    if (slot_changes) {\n        const slot_context = get_slot_context(slot_definition, ctx, $$scope, get_slot_context_fn);\n        slot.p(slot_context, slot_changes);\n    }\n}\nfunction update_slot(slot, slot_definition, ctx, $$scope, dirty, get_slot_changes_fn, get_slot_context_fn) {\n    const slot_changes = get_slot_changes(slot_definition, $$scope, dirty, get_slot_changes_fn);\n    update_slot_base(slot, slot_definition, ctx, $$scope, slot_changes, get_slot_context_fn);\n}\nfunction get_all_dirty_from_scope($$scope) {\n    if ($$scope.ctx.length > 32) {\n        const dirty = [];\n        const length = $$scope.ctx.length / 32;\n        for (let i = 0; i < length; i++) {\n            dirty[i] = -1;\n        }\n        return dirty;\n    }\n    return -1;\n}\nfunction exclude_internal_props(props) {\n    const result = {};\n    for (const k in props)\n        if (k[0] !== '$')\n            result[k] = props[k];\n    return result;\n}\nfunction compute_rest_props(props, keys) {\n    const rest = {};\n    keys = new Set(keys);\n    for (const k in props)\n        if (!keys.has(k) && k[0] !== '$')\n            rest[k] = props[k];\n    return rest;\n}\nfunction compute_slots(slots) {\n    const result = {};\n    for (const key in slots) {\n        result[key] = true;\n    }\n    return result;\n}\nfunction once(fn) {\n    let ran = false;\n    return function (...args) {\n        if (ran)\n            return;\n        ran = true;\n        fn.call(this, ...args);\n    };\n}\nfunction null_to_empty(value) {\n    return value == null ? '' : value;\n}\nfunction set_store_value(store, ret, value) {\n    store.set(value);\n    return ret;\n}\nconst has_prop = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop);\nfunction action_destroyer(action_result) {\n    return action_result && is_function(action_result.destroy) ? action_result.destroy : noop;\n}\n\nconst is_client = typeof window !== 'undefined';\nlet now = is_client\n    ? () => window.performance.now()\n    : () => Date.now();\nlet raf = is_client ? cb => requestAnimationFrame(cb) : noop;\n// used internally for testing\nfunction set_now(fn) {\n    now = fn;\n}\nfunction set_raf(fn) {\n    raf = fn;\n}\n\nconst tasks = new Set();\nfunction run_tasks(now) {\n    tasks.forEach(task => {\n        if (!task.c(now)) {\n            tasks.delete(task);\n            task.f();\n        }\n    });\n    if (tasks.size !== 0)\n        raf(run_tasks);\n}\n/**\n * For testing purposes only!\n */\nfunction clear_loops() {\n    tasks.clear();\n}\n/**\n * Creates a new task that runs on each raf frame\n * until it returns a falsy value or is aborted\n */\nfunction loop(callback) {\n    let task;\n    if (tasks.size === 0)\n        raf(run_tasks);\n    return {\n        promise: new Promise(fulfill => {\n            tasks.add(task = { c: callback, f: fulfill });\n        }),\n        abort() {\n            tasks.delete(task);\n        }\n    };\n}\n\n// Track which nodes are claimed during hydration. Unclaimed nodes can then be removed from the DOM\n// at the end of hydration without touching the remaining nodes.\nlet is_hydrating = false;\nfunction start_hydrating() {\n    is_hydrating = true;\n}\nfunction end_hydrating() {\n    is_hydrating = false;\n}\nfunction upper_bound(low, high, key, value) {\n    // Return first index of value larger than input value in the range [low, high)\n    while (low < high) {\n        const mid = low + ((high - low) >> 1);\n        if (key(mid) <= value) {\n            low = mid + 1;\n        }\n        else {\n            high = mid;\n        }\n    }\n    return low;\n}\nfunction init_hydrate(target) {\n    if (target.hydrate_init)\n        return;\n    target.hydrate_init = true;\n    // We know that all children have claim_order values since the unclaimed have been detached if target is not <head>\n    let children = target.childNodes;\n    // If target is <head>, there may be children without claim_order\n    if (target.nodeName === 'HEAD') {\n        const myChildren = [];\n        for (let i = 0; i < children.length; i++) {\n            const node = children[i];\n            if (node.claim_order !== undefined) {\n                myChildren.push(node);\n            }\n        }\n        children = myChildren;\n    }\n    /*\n    * Reorder claimed children optimally.\n    * We can reorder claimed children optimally by finding the longest subsequence of\n    * nodes that are already claimed in order and only moving the rest. The longest\n    * subsequence subsequence of nodes that are claimed in order can be found by\n    * computing the longest increasing subsequence of .claim_order values.\n    *\n    * This algorithm is optimal in generating the least amount of reorder operations\n    * possible.\n    *\n    * Proof:\n    * We know that, given a set of reordering operations, the nodes that do not move\n    * always form an increasing subsequence, since they do not move among each other\n    * meaning that they must be already ordered among each other. Thus, the maximal\n    * set of nodes that do not move form a longest increasing subsequence.\n    */\n    // Compute longest increasing subsequence\n    // m: subsequence length j => index k of smallest value that ends an increasing subsequence of length j\n    const m = new Int32Array(children.length + 1);\n    // Predecessor indices + 1\n    const p = new Int32Array(children.length);\n    m[0] = -1;\n    let longest = 0;\n    for (let i = 0; i < children.length; i++) {\n        const current = children[i].claim_order;\n        // Find the largest subsequence length such that it ends in a value less than our current value\n        // upper_bound returns first greater value, so we subtract one\n        // with fast path for when we are on the current longest subsequence\n        const seqLen = ((longest > 0 && children[m[longest]].claim_order <= current) ? longest + 1 : upper_bound(1, longest, idx => children[m[idx]].claim_order, current)) - 1;\n        p[i] = m[seqLen] + 1;\n        const newLen = seqLen + 1;\n        // We can guarantee that current is the smallest value. Otherwise, we would have generated a longer sequence.\n        m[newLen] = i;\n        longest = Math.max(newLen, longest);\n    }\n    // The longest increasing subsequence of nodes (initially reversed)\n    const lis = [];\n    // The rest of the nodes, nodes that will be moved\n    const toMove = [];\n    let last = children.length - 1;\n    for (let cur = m[longest] + 1; cur != 0; cur = p[cur - 1]) {\n        lis.push(children[cur - 1]);\n        for (; last >= cur; last--) {\n            toMove.push(children[last]);\n        }\n        last--;\n    }\n    for (; last >= 0; last--) {\n        toMove.push(children[last]);\n    }\n    lis.reverse();\n    // We sort the nodes being moved to guarantee that their insertion order matches the claim order\n    toMove.sort((a, b) => a.claim_order - b.claim_order);\n    // Finally, we move the nodes\n    for (let i = 0, j = 0; i < toMove.length; i++) {\n        while (j < lis.length && toMove[i].claim_order >= lis[j].claim_order) {\n            j++;\n        }\n        const anchor = j < lis.length ? lis[j] : null;\n        target.insertBefore(toMove[i], anchor);\n    }\n}\nfunction append(target, node) {\n    target.appendChild(node);\n}\nfunction append_styles(target, style_sheet_id, styles) {\n    const append_styles_to = get_root_for_style(target);\n    if (!append_styles_to.getElementById(style_sheet_id)) {\n        const style = element('style');\n        style.id = style_sheet_id;\n        style.textContent = styles;\n        append_stylesheet(append_styles_to, style);\n    }\n}\nfunction get_root_for_style(node) {\n    if (!node)\n        return document;\n    const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;\n    if (root && root.host) {\n        return root;\n    }\n    return node.ownerDocument;\n}\nfunction append_empty_stylesheet(node) {\n    const style_element = element('style');\n    append_stylesheet(get_root_for_style(node), style_element);\n    return style_element;\n}\nfunction append_stylesheet(node, style) {\n    append(node.head || node, style);\n}\nfunction append_hydration(target, node) {\n    if (is_hydrating) {\n        init_hydrate(target);\n        if ((target.actual_end_child === undefined) || ((target.actual_end_child !== null) && (target.actual_end_child.parentElement !== target))) {\n            target.actual_end_child = target.firstChild;\n        }\n        // Skip nodes of undefined ordering\n        while ((target.actual_end_child !== null) && (target.actual_end_child.claim_order === undefined)) {\n            target.actual_end_child = target.actual_end_child.nextSibling;\n        }\n        if (node !== target.actual_end_child) {\n            // We only insert if the ordering of this node should be modified or the parent node is not target\n            if (node.claim_order !== undefined || node.parentNode !== target) {\n                target.insertBefore(node, target.actual_end_child);\n            }\n        }\n        else {\n            target.actual_end_child = node.nextSibling;\n        }\n    }\n    else if (node.parentNode !== target || node.nextSibling !== null) {\n        target.appendChild(node);\n    }\n}\nfunction insert(target, node, anchor) {\n    target.insertBefore(node, anchor || null);\n}\nfunction insert_hydration(target, node, anchor) {\n    if (is_hydrating && !anchor) {\n        append_hydration(target, node);\n    }\n    else if (node.parentNode !== target || node.nextSibling != anchor) {\n        target.insertBefore(node, anchor || null);\n    }\n}\nfunction detach(node) {\n    node.parentNode.removeChild(node);\n}\nfunction destroy_each(iterations, detaching) {\n    for (let i = 0; i < iterations.length; i += 1) {\n        if (iterations[i])\n            iterations[i].d(detaching);\n    }\n}\nfunction element(name) {\n    return document.createElement(name);\n}\nfunction element_is(name, is) {\n    return document.createElement(name, { is });\n}\nfunction object_without_properties(obj, exclude) {\n    const target = {};\n    for (const k in obj) {\n        if (has_prop(obj, k)\n            // @ts-ignore\n            && exclude.indexOf(k) === -1) {\n            // @ts-ignore\n            target[k] = obj[k];\n        }\n    }\n    return target;\n}\nfunction svg_element(name) {\n    return document.createElementNS('http://www.w3.org/2000/svg', name);\n}\nfunction text(data) {\n    return document.createTextNode(data);\n}\nfunction space() {\n    return text(' ');\n}\nfunction empty() {\n    return text('');\n}\nfunction listen(node, event, handler, options) {\n    node.addEventListener(event, handler, options);\n    return () => node.removeEventListener(event, handler, options);\n}\nfunction prevent_default(fn) {\n    return function (event) {\n        event.preventDefault();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction stop_propagation(fn) {\n    return function (event) {\n        event.stopPropagation();\n        // @ts-ignore\n        return fn.call(this, event);\n    };\n}\nfunction self(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.target === this)\n            fn.call(this, event);\n    };\n}\nfunction trusted(fn) {\n    return function (event) {\n        // @ts-ignore\n        if (event.isTrusted)\n            fn.call(this, event);\n    };\n}\nfunction attr(node, attribute, value) {\n    if (value == null)\n        node.removeAttribute(attribute);\n    else if (node.getAttribute(attribute) !== value)\n        node.setAttribute(attribute, value);\n}\nfunction set_attributes(node, attributes) {\n    // @ts-ignore\n    const descriptors = Object.getOwnPropertyDescriptors(node.__proto__);\n    for (const key in attributes) {\n        if (attributes[key] == null) {\n            node.removeAttribute(key);\n        }\n        else if (key === 'style') {\n            node.style.cssText = attributes[key];\n        }\n        else if (key === '__value') {\n            node.value = node[key] = attributes[key];\n        }\n        else if (descriptors[key] && descriptors[key].set) {\n            node[key] = attributes[key];\n        }\n        else {\n            attr(node, key, attributes[key]);\n        }\n    }\n}\nfunction set_svg_attributes(node, attributes) {\n    for (const key in attributes) {\n        attr(node, key, attributes[key]);\n    }\n}\nfunction set_custom_element_data(node, prop, value) {\n    if (prop in node) {\n        node[prop] = typeof node[prop] === 'boolean' && value === '' ? true : value;\n    }\n    else {\n        attr(node, prop, value);\n    }\n}\nfunction xlink_attr(node, attribute, value) {\n    node.setAttributeNS('http://www.w3.org/1999/xlink', attribute, value);\n}\nfunction get_binding_group_value(group, __value, checked) {\n    const value = new Set();\n    for (let i = 0; i < group.length; i += 1) {\n        if (group[i].checked)\n            value.add(group[i].__value);\n    }\n    if (!checked) {\n        value.delete(__value);\n    }\n    return Array.from(value);\n}\nfunction to_number(value) {\n    return value === '' ? null : +value;\n}\nfunction time_ranges_to_array(ranges) {\n    const array = [];\n    for (let i = 0; i < ranges.length; i += 1) {\n        array.push({ start: ranges.start(i), end: ranges.end(i) });\n    }\n    return array;\n}\nfunction children(element) {\n    return Array.from(element.childNodes);\n}\nfunction init_claim_info(nodes) {\n    if (nodes.claim_info === undefined) {\n        nodes.claim_info = { last_index: 0, total_claimed: 0 };\n    }\n}\nfunction claim_node(nodes, predicate, processNode, createNode, dontUpdateLastIndex = false) {\n    // Try to find nodes in an order such that we lengthen the longest increasing subsequence\n    init_claim_info(nodes);\n    const resultNode = (() => {\n        // We first try to find an element after the previous one\n        for (let i = nodes.claim_info.last_index; i < nodes.length; i++) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                return node;\n            }\n        }\n        // Otherwise, we try to find one before\n        // We iterate in reverse so that we don't go too far back\n        for (let i = nodes.claim_info.last_index - 1; i >= 0; i--) {\n            const node = nodes[i];\n            if (predicate(node)) {\n                const replacement = processNode(node);\n                if (replacement === undefined) {\n                    nodes.splice(i, 1);\n                }\n                else {\n                    nodes[i] = replacement;\n                }\n                if (!dontUpdateLastIndex) {\n                    nodes.claim_info.last_index = i;\n                }\n                else if (replacement === undefined) {\n                    // Since we spliced before the last_index, we decrease it\n                    nodes.claim_info.last_index--;\n                }\n                return node;\n            }\n        }\n        // If we can't find any matching node, we create a new one\n        return createNode();\n    })();\n    resultNode.claim_order = nodes.claim_info.total_claimed;\n    nodes.claim_info.total_claimed += 1;\n    return resultNode;\n}\nfunction claim_element_base(nodes, name, attributes, create_element) {\n    return claim_node(nodes, (node) => node.nodeName === name, (node) => {\n        const remove = [];\n        for (let j = 0; j < node.attributes.length; j++) {\n            const attribute = node.attributes[j];\n            if (!attributes[attribute.name]) {\n                remove.push(attribute.name);\n            }\n        }\n        remove.forEach(v => node.removeAttribute(v));\n        return undefined;\n    }, () => create_element(name));\n}\nfunction claim_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, element);\n}\nfunction claim_svg_element(nodes, name, attributes) {\n    return claim_element_base(nodes, name, attributes, svg_element);\n}\nfunction claim_text(nodes, data) {\n    return claim_node(nodes, (node) => node.nodeType === 3, (node) => {\n        const dataStr = '' + data;\n        if (node.data.startsWith(dataStr)) {\n            if (node.data.length !== dataStr.length) {\n                return node.splitText(dataStr.length);\n            }\n        }\n        else {\n            node.data = dataStr;\n        }\n    }, () => text(data), true // Text nodes should not update last index since it is likely not worth it to eliminate an increasing subsequence of actual elements\n    );\n}\nfunction claim_space(nodes) {\n    return claim_text(nodes, ' ');\n}\nfunction find_comment(nodes, text, start) {\n    for (let i = start; i < nodes.length; i += 1) {\n        const node = nodes[i];\n        if (node.nodeType === 8 /* comment node */ && node.textContent.trim() === text) {\n            return i;\n        }\n    }\n    return nodes.length;\n}\nfunction claim_html_tag(nodes) {\n    // find html opening tag\n    const start_index = find_comment(nodes, 'HTML_TAG_START', 0);\n    const end_index = find_comment(nodes, 'HTML_TAG_END', start_index);\n    if (start_index === end_index) {\n        return new HtmlTagHydration();\n    }\n    init_claim_info(nodes);\n    const html_tag_nodes = nodes.splice(start_index, end_index + 1);\n    detach(html_tag_nodes[0]);\n    detach(html_tag_nodes[html_tag_nodes.length - 1]);\n    const claimed_nodes = html_tag_nodes.slice(1, html_tag_nodes.length - 1);\n    for (const n of claimed_nodes) {\n        n.claim_order = nodes.claim_info.total_claimed;\n        nodes.claim_info.total_claimed += 1;\n    }\n    return new HtmlTagHydration(claimed_nodes);\n}\nfunction set_data(text, data) {\n    data = '' + data;\n    if (text.wholeText !== data)\n        text.data = data;\n}\nfunction set_input_value(input, value) {\n    input.value = value == null ? '' : value;\n}\nfunction set_input_type(input, type) {\n    try {\n        input.type = type;\n    }\n    catch (e) {\n        // do nothing\n    }\n}\nfunction set_style(node, key, value, important) {\n    node.style.setProperty(key, value, important ? 'important' : '');\n}\nfunction select_option(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        if (option.__value === value) {\n            option.selected = true;\n            return;\n        }\n    }\n    select.selectedIndex = -1; // no option should be selected\n}\nfunction select_options(select, value) {\n    for (let i = 0; i < select.options.length; i += 1) {\n        const option = select.options[i];\n        option.selected = ~value.indexOf(option.__value);\n    }\n}\nfunction select_value(select) {\n    const selected_option = select.querySelector(':checked') || select.options[0];\n    return selected_option && selected_option.__value;\n}\nfunction select_multiple_value(select) {\n    return [].map.call(select.querySelectorAll(':checked'), option => option.__value);\n}\n// unfortunately this can't be a constant as that wouldn't be tree-shakeable\n// so we cache the result instead\nlet crossorigin;\nfunction is_crossorigin() {\n    if (crossorigin === undefined) {\n        crossorigin = false;\n        try {\n            if (typeof window !== 'undefined' && window.parent) {\n                void window.parent.document;\n            }\n        }\n        catch (error) {\n            crossorigin = true;\n        }\n    }\n    return crossorigin;\n}\nfunction add_resize_listener(node, fn) {\n    const computed_style = getComputedStyle(node);\n    if (computed_style.position === 'static') {\n        node.style.position = 'relative';\n    }\n    const iframe = element('iframe');\n    iframe.setAttribute('style', 'display: block; position: absolute; top: 0; left: 0; width: 100%; height: 100%; ' +\n        'overflow: hidden; border: 0; opacity: 0; pointer-events: none; z-index: -1;');\n    iframe.setAttribute('aria-hidden', 'true');\n    iframe.tabIndex = -1;\n    const crossorigin = is_crossorigin();\n    let unsubscribe;\n    if (crossorigin) {\n        iframe.src = \"data:text/html,<script>onresize=function(){parent.postMessage(0,'*')}</script>\";\n        unsubscribe = listen(window, 'message', (event) => {\n            if (event.source === iframe.contentWindow)\n                fn();\n        });\n    }\n    else {\n        iframe.src = 'about:blank';\n        iframe.onload = () => {\n            unsubscribe = listen(iframe.contentWindow, 'resize', fn);\n        };\n    }\n    append(node, iframe);\n    return () => {\n        if (crossorigin) {\n            unsubscribe();\n        }\n        else if (unsubscribe && iframe.contentWindow) {\n            unsubscribe();\n        }\n        detach(iframe);\n    };\n}\nfunction toggle_class(element, name, toggle) {\n    element.classList[toggle ? 'add' : 'remove'](name);\n}\nfunction custom_event(type, detail, bubbles = false) {\n    const e = document.createEvent('CustomEvent');\n    e.initCustomEvent(type, bubbles, false, detail);\n    return e;\n}\nfunction query_selector_all(selector, parent = document.body) {\n    return Array.from(parent.querySelectorAll(selector));\n}\nclass HtmlTag {\n    constructor() {\n        this.e = this.n = null;\n    }\n    c(html) {\n        this.h(html);\n    }\n    m(html, target, anchor = null) {\n        if (!this.e) {\n            this.e = element(target.nodeName);\n            this.t = target;\n            this.c(html);\n        }\n        this.i(anchor);\n    }\n    h(html) {\n        this.e.innerHTML = html;\n        this.n = Array.from(this.e.childNodes);\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert(this.t, this.n[i], anchor);\n        }\n    }\n    p(html) {\n        this.d();\n        this.h(html);\n        this.i(this.a);\n    }\n    d() {\n        this.n.forEach(detach);\n    }\n}\nclass HtmlTagHydration extends HtmlTag {\n    constructor(claimed_nodes) {\n        super();\n        this.e = this.n = null;\n        this.l = claimed_nodes;\n    }\n    c(html) {\n        if (this.l) {\n            this.n = this.l;\n        }\n        else {\n            super.c(html);\n        }\n    }\n    i(anchor) {\n        for (let i = 0; i < this.n.length; i += 1) {\n            insert_hydration(this.t, this.n[i], anchor);\n        }\n    }\n}\nfunction attribute_to_object(attributes) {\n    const result = {};\n    for (const attribute of attributes) {\n        result[attribute.name] = attribute.value;\n    }\n    return result;\n}\nfunction get_custom_elements_slots(element) {\n    const result = {};\n    element.childNodes.forEach((node) => {\n        result[node.slot || 'default'] = true;\n    });\n    return result;\n}\n\nconst active_docs = new Set();\nlet active = 0;\n// https://github.com/darkskyapp/string-hash/blob/master/index.js\nfunction hash(str) {\n    let hash = 5381;\n    let i = str.length;\n    while (i--)\n        hash = ((hash << 5) - hash) ^ str.charCodeAt(i);\n    return hash >>> 0;\n}\nfunction create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {\n    const step = 16.666 / duration;\n    let keyframes = '{\\n';\n    for (let p = 0; p <= 1; p += step) {\n        const t = a + (b - a) * ease(p);\n        keyframes += p * 100 + `%{${fn(t, 1 - t)}}\\n`;\n    }\n    const rule = keyframes + `100% {${fn(b, 1 - b)}}\\n}`;\n    const name = `__svelte_${hash(rule)}_${uid}`;\n    const doc = get_root_for_style(node);\n    active_docs.add(doc);\n    const stylesheet = doc.__svelte_stylesheet || (doc.__svelte_stylesheet = append_empty_stylesheet(node).sheet);\n    const current_rules = doc.__svelte_rules || (doc.__svelte_rules = {});\n    if (!current_rules[name]) {\n        current_rules[name] = true;\n        stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);\n    }\n    const animation = node.style.animation || '';\n    node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;\n    active += 1;\n    return name;\n}\nfunction delete_rule(node, name) {\n    const previous = (node.style.animation || '').split(', ');\n    const next = previous.filter(name\n        ? anim => anim.indexOf(name) < 0 // remove specific animation\n        : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations\n    );\n    const deleted = previous.length - next.length;\n    if (deleted) {\n        node.style.animation = next.join(', ');\n        active -= deleted;\n        if (!active)\n            clear_rules();\n    }\n}\nfunction clear_rules() {\n    raf(() => {\n        if (active)\n            return;\n        active_docs.forEach(doc => {\n            const stylesheet = doc.__svelte_stylesheet;\n            let i = stylesheet.cssRules.length;\n            while (i--)\n                stylesheet.deleteRule(i);\n            doc.__svelte_rules = {};\n        });\n        active_docs.clear();\n    });\n}\n\nfunction create_animation(node, from, fn, params) {\n    if (!from)\n        return noop;\n    const to = node.getBoundingClientRect();\n    if (from.left === to.left && from.right === to.right && from.top === to.top && from.bottom === to.bottom)\n        return noop;\n    const { delay = 0, duration = 300, easing = identity, \n    // @ts-ignore todo: should this be separated from destructuring? Or start/end added to public api and documentation?\n    start: start_time = now() + delay, \n    // @ts-ignore todo:\n    end = start_time + duration, tick = noop, css } = fn(node, { from, to }, params);\n    let running = true;\n    let started = false;\n    let name;\n    function start() {\n        if (css) {\n            name = create_rule(node, 0, 1, duration, delay, easing, css);\n        }\n        if (!delay) {\n            started = true;\n        }\n    }\n    function stop() {\n        if (css)\n            delete_rule(node, name);\n        running = false;\n    }\n    loop(now => {\n        if (!started && now >= start_time) {\n            started = true;\n        }\n        if (started && now >= end) {\n            tick(1, 0);\n            stop();\n        }\n        if (!running) {\n            return false;\n        }\n        if (started) {\n            const p = now - start_time;\n            const t = 0 + 1 * easing(p / duration);\n            tick(t, 1 - t);\n        }\n        return true;\n    });\n    start();\n    tick(0, 1);\n    return stop;\n}\nfunction fix_position(node) {\n    const style = getComputedStyle(node);\n    if (style.position !== 'absolute' && style.position !== 'fixed') {\n        const { width, height } = style;\n        const a = node.getBoundingClientRect();\n        node.style.position = 'absolute';\n        node.style.width = width;\n        node.style.height = height;\n        add_transform(node, a);\n    }\n}\nfunction add_transform(node, a) {\n    const b = node.getBoundingClientRect();\n    if (a.left !== b.left || a.top !== b.top) {\n        const style = getComputedStyle(node);\n        const transform = style.transform === 'none' ? '' : style.transform;\n        node.style.transform = `${transform} translate(${a.left - b.left}px, ${a.top - b.top}px)`;\n    }\n}\n\nlet current_component;\nfunction set_current_component(component) {\n    current_component = component;\n}\nfunction get_current_component() {\n    if (!current_component)\n        throw new Error('Function called outside component initialization');\n    return current_component;\n}\nfunction beforeUpdate(fn) {\n    get_current_component().$$.before_update.push(fn);\n}\nfunction onMount(fn) {\n    get_current_component().$$.on_mount.push(fn);\n}\nfunction afterUpdate(fn) {\n    get_current_component().$$.after_update.push(fn);\n}\nfunction onDestroy(fn) {\n    get_current_component().$$.on_destroy.push(fn);\n}\nfunction createEventDispatcher() {\n    const component = get_current_component();\n    return (type, detail) => {\n        const callbacks = component.$$.callbacks[type];\n        if (callbacks) {\n            // TODO are there situations where events could be dispatched\n            // in a server (non-DOM) environment?\n            const event = custom_event(type, detail);\n            callbacks.slice().forEach(fn => {\n                fn.call(component, event);\n            });\n        }\n    };\n}\nfunction setContext(key, context) {\n    get_current_component().$$.context.set(key, context);\n}\nfunction getContext(key) {\n    return get_current_component().$$.context.get(key);\n}\nfunction getAllContexts() {\n    return get_current_component().$$.context;\n}\nfunction hasContext(key) {\n    return get_current_component().$$.context.has(key);\n}\n// TODO figure out if we still want to support\n// shorthand events, or if we want to implement\n// a real bubbling mechanism\nfunction bubble(component, event) {\n    const callbacks = component.$$.callbacks[event.type];\n    if (callbacks) {\n        // @ts-ignore\n        callbacks.slice().forEach(fn => fn.call(this, event));\n    }\n}\n\nconst dirty_components = [];\nconst intros = { enabled: false };\nconst binding_callbacks = [];\nconst render_callbacks = [];\nconst flush_callbacks = [];\nconst resolved_promise = Promise.resolve();\nlet update_scheduled = false;\nfunction schedule_update() {\n    if (!update_scheduled) {\n        update_scheduled = true;\n        resolved_promise.then(flush);\n    }\n}\nfunction tick() {\n    schedule_update();\n    return resolved_promise;\n}\nfunction add_render_callback(fn) {\n    render_callbacks.push(fn);\n}\nfunction add_flush_callback(fn) {\n    flush_callbacks.push(fn);\n}\nlet flushing = false;\nconst seen_callbacks = new Set();\nfunction flush() {\n    if (flushing)\n        return;\n    flushing = true;\n    do {\n        // first, call beforeUpdate functions\n        // and update components\n        for (let i = 0; i < dirty_components.length; i += 1) {\n            const component = dirty_components[i];\n            set_current_component(component);\n            update(component.$$);\n        }\n        set_current_component(null);\n        dirty_components.length = 0;\n        while (binding_callbacks.length)\n            binding_callbacks.pop()();\n        // then, once components are updated, call\n        // afterUpdate functions. This may cause\n        // subsequent updates...\n        for (let i = 0; i < render_callbacks.length; i += 1) {\n            const callback = render_callbacks[i];\n            if (!seen_callbacks.has(callback)) {\n                // ...so guard against infinite loops\n                seen_callbacks.add(callback);\n                callback();\n            }\n        }\n        render_callbacks.length = 0;\n    } while (dirty_components.length);\n    while (flush_callbacks.length) {\n        flush_callbacks.pop()();\n    }\n    update_scheduled = false;\n    flushing = false;\n    seen_callbacks.clear();\n}\nfunction update($$) {\n    if ($$.fragment !== null) {\n        $$.update();\n        run_all($$.before_update);\n        const dirty = $$.dirty;\n        $$.dirty = [-1];\n        $$.fragment && $$.fragment.p($$.ctx, dirty);\n        $$.after_update.forEach(add_render_callback);\n    }\n}\n\nlet promise;\nfunction wait() {\n    if (!promise) {\n        promise = Promise.resolve();\n        promise.then(() => {\n            promise = null;\n        });\n    }\n    return promise;\n}\nfunction dispatch(node, direction, kind) {\n    node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));\n}\nconst outroing = new Set();\nlet outros;\nfunction group_outros() {\n    outros = {\n        r: 0,\n        c: [],\n        p: outros // parent group\n    };\n}\nfunction check_outros() {\n    if (!outros.r) {\n        run_all(outros.c);\n    }\n    outros = outros.p;\n}\nfunction transition_in(block, local) {\n    if (block && block.i) {\n        outroing.delete(block);\n        block.i(local);\n    }\n}\nfunction transition_out(block, local, detach, callback) {\n    if (block && block.o) {\n        if (outroing.has(block))\n            return;\n        outroing.add(block);\n        outros.c.push(() => {\n            outroing.delete(block);\n            if (callback) {\n                if (detach)\n                    block.d(1);\n                callback();\n            }\n        });\n        block.o(local);\n    }\n}\nconst null_transition = { duration: 0 };\nfunction create_in_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = false;\n    let animation_name;\n    let task;\n    let uid = 0;\n    function cleanup() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);\n        tick(0, 1);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        if (task)\n            task.abort();\n        running = true;\n        add_render_callback(() => dispatch(node, true, 'start'));\n        task = loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(1, 0);\n                    dispatch(node, true, 'end');\n                    cleanup();\n                    return running = false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(t, 1 - t);\n                }\n            }\n            return running;\n        });\n    }\n    let started = false;\n    return {\n        start() {\n            if (started)\n                return;\n            started = true;\n            delete_rule(node);\n            if (is_function(config)) {\n                config = config();\n                wait().then(go);\n            }\n            else {\n                go();\n            }\n        },\n        invalidate() {\n            started = false;\n        },\n        end() {\n            if (running) {\n                cleanup();\n                running = false;\n            }\n        }\n    };\n}\nfunction create_out_transition(node, fn, params) {\n    let config = fn(node, params);\n    let running = true;\n    let animation_name;\n    const group = outros;\n    group.r += 1;\n    function go() {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        if (css)\n            animation_name = create_rule(node, 1, 0, duration, delay, easing, css);\n        const start_time = now() + delay;\n        const end_time = start_time + duration;\n        add_render_callback(() => dispatch(node, false, 'start'));\n        loop(now => {\n            if (running) {\n                if (now >= end_time) {\n                    tick(0, 1);\n                    dispatch(node, false, 'end');\n                    if (!--group.r) {\n                        // this will result in `end()` being called,\n                        // so we don't need to clean up here\n                        run_all(group.c);\n                    }\n                    return false;\n                }\n                if (now >= start_time) {\n                    const t = easing((now - start_time) / duration);\n                    tick(1 - t, t);\n                }\n            }\n            return running;\n        });\n    }\n    if (is_function(config)) {\n        wait().then(() => {\n            // @ts-ignore\n            config = config();\n            go();\n        });\n    }\n    else {\n        go();\n    }\n    return {\n        end(reset) {\n            if (reset && config.tick) {\n                config.tick(1, 0);\n            }\n            if (running) {\n                if (animation_name)\n                    delete_rule(node, animation_name);\n                running = false;\n            }\n        }\n    };\n}\nfunction create_bidirectional_transition(node, fn, params, intro) {\n    let config = fn(node, params);\n    let t = intro ? 0 : 1;\n    let running_program = null;\n    let pending_program = null;\n    let animation_name = null;\n    function clear_animation() {\n        if (animation_name)\n            delete_rule(node, animation_name);\n    }\n    function init(program, duration) {\n        const d = (program.b - t);\n        duration *= Math.abs(d);\n        return {\n            a: t,\n            b: program.b,\n            d,\n            duration,\n            start: program.start,\n            end: program.start + duration,\n            group: program.group\n        };\n    }\n    function go(b) {\n        const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;\n        const program = {\n            start: now() + delay,\n            b\n        };\n        if (!b) {\n            // @ts-ignore todo: improve typings\n            program.group = outros;\n            outros.r += 1;\n        }\n        if (running_program || pending_program) {\n            pending_program = program;\n        }\n        else {\n            // if this is an intro, and there's a delay, we need to do\n            // an initial tick and/or apply CSS animation immediately\n            if (css) {\n                clear_animation();\n                animation_name = create_rule(node, t, b, duration, delay, easing, css);\n            }\n            if (b)\n                tick(0, 1);\n            running_program = init(program, duration);\n            add_render_callback(() => dispatch(node, b, 'start'));\n            loop(now => {\n                if (pending_program && now > pending_program.start) {\n                    running_program = init(pending_program, duration);\n                    pending_program = null;\n                    dispatch(node, running_program.b, 'start');\n                    if (css) {\n                        clear_animation();\n                        animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);\n                    }\n                }\n                if (running_program) {\n                    if (now >= running_program.end) {\n                        tick(t = running_program.b, 1 - t);\n                        dispatch(node, running_program.b, 'end');\n                        if (!pending_program) {\n                            // we're done\n                            if (running_program.b) {\n                                // intro — we can tidy up immediately\n                                clear_animation();\n                            }\n                            else {\n                                // outro — needs to be coordinated\n                                if (!--running_program.group.r)\n                                    run_all(running_program.group.c);\n                            }\n                        }\n                        running_program = null;\n                    }\n                    else if (now >= running_program.start) {\n                        const p = now - running_program.start;\n                        t = running_program.a + running_program.d * easing(p / running_program.duration);\n                        tick(t, 1 - t);\n                    }\n                }\n                return !!(running_program || pending_program);\n            });\n        }\n    }\n    return {\n        run(b) {\n            if (is_function(config)) {\n                wait().then(() => {\n                    // @ts-ignore\n                    config = config();\n                    go(b);\n                });\n            }\n            else {\n                go(b);\n            }\n        },\n        end() {\n            clear_animation();\n            running_program = pending_program = null;\n        }\n    };\n}\n\nfunction handle_promise(promise, info) {\n    const token = info.token = {};\n    function update(type, index, key, value) {\n        if (info.token !== token)\n            return;\n        info.resolved = value;\n        let child_ctx = info.ctx;\n        if (key !== undefined) {\n            child_ctx = child_ctx.slice();\n            child_ctx[key] = value;\n        }\n        const block = type && (info.current = type)(child_ctx);\n        let needs_flush = false;\n        if (info.block) {\n            if (info.blocks) {\n                info.blocks.forEach((block, i) => {\n                    if (i !== index && block) {\n                        group_outros();\n                        transition_out(block, 1, 1, () => {\n                            if (info.blocks[i] === block) {\n                                info.blocks[i] = null;\n                            }\n                        });\n                        check_outros();\n                    }\n                });\n            }\n            else {\n                info.block.d(1);\n            }\n            block.c();\n            transition_in(block, 1);\n            block.m(info.mount(), info.anchor);\n            needs_flush = true;\n        }\n        info.block = block;\n        if (info.blocks)\n            info.blocks[index] = block;\n        if (needs_flush) {\n            flush();\n        }\n    }\n    if (is_promise(promise)) {\n        const current_component = get_current_component();\n        promise.then(value => {\n            set_current_component(current_component);\n            update(info.then, 1, info.value, value);\n            set_current_component(null);\n        }, error => {\n            set_current_component(current_component);\n            update(info.catch, 2, info.error, error);\n            set_current_component(null);\n            if (!info.hasCatch) {\n                throw error;\n            }\n        });\n        // if we previously had a then/catch block, destroy it\n        if (info.current !== info.pending) {\n            update(info.pending, 0);\n            return true;\n        }\n    }\n    else {\n        if (info.current !== info.then) {\n            update(info.then, 1, info.value, promise);\n            return true;\n        }\n        info.resolved = promise;\n    }\n}\nfunction update_await_block_branch(info, ctx, dirty) {\n    const child_ctx = ctx.slice();\n    const { resolved } = info;\n    if (info.current === info.then) {\n        child_ctx[info.value] = resolved;\n    }\n    if (info.current === info.catch) {\n        child_ctx[info.error] = resolved;\n    }\n    info.block.p(child_ctx, dirty);\n}\n\nconst globals = (typeof window !== 'undefined'\n    ? window\n    : typeof globalThis !== 'undefined'\n        ? globalThis\n        : global);\n\nfunction destroy_block(block, lookup) {\n    block.d(1);\n    lookup.delete(block.key);\n}\nfunction outro_and_destroy_block(block, lookup) {\n    transition_out(block, 1, 1, () => {\n        lookup.delete(block.key);\n    });\n}\nfunction fix_and_destroy_block(block, lookup) {\n    block.f();\n    destroy_block(block, lookup);\n}\nfunction fix_and_outro_and_destroy_block(block, lookup) {\n    block.f();\n    outro_and_destroy_block(block, lookup);\n}\nfunction update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {\n    let o = old_blocks.length;\n    let n = list.length;\n    let i = o;\n    const old_indexes = {};\n    while (i--)\n        old_indexes[old_blocks[i].key] = i;\n    const new_blocks = [];\n    const new_lookup = new Map();\n    const deltas = new Map();\n    i = n;\n    while (i--) {\n        const child_ctx = get_context(ctx, list, i);\n        const key = get_key(child_ctx);\n        let block = lookup.get(key);\n        if (!block) {\n            block = create_each_block(key, child_ctx);\n            block.c();\n        }\n        else if (dynamic) {\n            block.p(child_ctx, dirty);\n        }\n        new_lookup.set(key, new_blocks[i] = block);\n        if (key in old_indexes)\n            deltas.set(key, Math.abs(i - old_indexes[key]));\n    }\n    const will_move = new Set();\n    const did_move = new Set();\n    function insert(block) {\n        transition_in(block, 1);\n        block.m(node, next);\n        lookup.set(block.key, block);\n        next = block.first;\n        n--;\n    }\n    while (o && n) {\n        const new_block = new_blocks[n - 1];\n        const old_block = old_blocks[o - 1];\n        const new_key = new_block.key;\n        const old_key = old_block.key;\n        if (new_block === old_block) {\n            // do nothing\n            next = new_block.first;\n            o--;\n            n--;\n        }\n        else if (!new_lookup.has(old_key)) {\n            // remove old block\n            destroy(old_block, lookup);\n            o--;\n        }\n        else if (!lookup.has(new_key) || will_move.has(new_key)) {\n            insert(new_block);\n        }\n        else if (did_move.has(old_key)) {\n            o--;\n        }\n        else if (deltas.get(new_key) > deltas.get(old_key)) {\n            did_move.add(new_key);\n            insert(new_block);\n        }\n        else {\n            will_move.add(old_key);\n            o--;\n        }\n    }\n    while (o--) {\n        const old_block = old_blocks[o];\n        if (!new_lookup.has(old_block.key))\n            destroy(old_block, lookup);\n    }\n    while (n)\n        insert(new_blocks[n - 1]);\n    return new_blocks;\n}\nfunction validate_each_keys(ctx, list, get_context, get_key) {\n    const keys = new Set();\n    for (let i = 0; i < list.length; i++) {\n        const key = get_key(get_context(ctx, list, i));\n        if (keys.has(key)) {\n            throw new Error('Cannot have duplicate keys in a keyed each');\n        }\n        keys.add(key);\n    }\n}\n\nfunction get_spread_update(levels, updates) {\n    const update = {};\n    const to_null_out = {};\n    const accounted_for = { $$scope: 1 };\n    let i = levels.length;\n    while (i--) {\n        const o = levels[i];\n        const n = updates[i];\n        if (n) {\n            for (const key in o) {\n                if (!(key in n))\n                    to_null_out[key] = 1;\n            }\n            for (const key in n) {\n                if (!accounted_for[key]) {\n                    update[key] = n[key];\n                    accounted_for[key] = 1;\n                }\n            }\n            levels[i] = n;\n        }\n        else {\n            for (const key in o) {\n                accounted_for[key] = 1;\n            }\n        }\n    }\n    for (const key in to_null_out) {\n        if (!(key in update))\n            update[key] = undefined;\n    }\n    return update;\n}\nfunction get_spread_object(spread_props) {\n    return typeof spread_props === 'object' && spread_props !== null ? spread_props : {};\n}\n\n// source: https://html.spec.whatwg.org/multipage/indices.html\nconst boolean_attributes = new Set([\n    'allowfullscreen',\n    'allowpaymentrequest',\n    'async',\n    'autofocus',\n    'autoplay',\n    'checked',\n    'controls',\n    'default',\n    'defer',\n    'disabled',\n    'formnovalidate',\n    'hidden',\n    'ismap',\n    'loop',\n    'multiple',\n    'muted',\n    'nomodule',\n    'novalidate',\n    'open',\n    'playsinline',\n    'readonly',\n    'required',\n    'reversed',\n    'selected'\n]);\n\nconst invalid_attribute_name_character = /[\\s'\">/=\\u{FDD0}-\\u{FDEF}\\u{FFFE}\\u{FFFF}\\u{1FFFE}\\u{1FFFF}\\u{2FFFE}\\u{2FFFF}\\u{3FFFE}\\u{3FFFF}\\u{4FFFE}\\u{4FFFF}\\u{5FFFE}\\u{5FFFF}\\u{6FFFE}\\u{6FFFF}\\u{7FFFE}\\u{7FFFF}\\u{8FFFE}\\u{8FFFF}\\u{9FFFE}\\u{9FFFF}\\u{AFFFE}\\u{AFFFF}\\u{BFFFE}\\u{BFFFF}\\u{CFFFE}\\u{CFFFF}\\u{DFFFE}\\u{DFFFF}\\u{EFFFE}\\u{EFFFF}\\u{FFFFE}\\u{FFFFF}\\u{10FFFE}\\u{10FFFF}]/u;\n// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2\n// https://infra.spec.whatwg.org/#noncharacter\nfunction spread(args, classes_to_add) {\n    const attributes = Object.assign({}, ...args);\n    if (classes_to_add) {\n        if (attributes.class == null) {\n            attributes.class = classes_to_add;\n        }\n        else {\n            attributes.class += ' ' + classes_to_add;\n        }\n    }\n    let str = '';\n    Object.keys(attributes).forEach(name => {\n        if (invalid_attribute_name_character.test(name))\n            return;\n        const value = attributes[name];\n        if (value === true)\n            str += ' ' + name;\n        else if (boolean_attributes.has(name.toLowerCase())) {\n            if (value)\n                str += ' ' + name;\n        }\n        else if (value != null) {\n            str += ` ${name}=\"${value}\"`;\n        }\n    });\n    return str;\n}\nconst escaped = {\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;'\n};\nfunction escape(html) {\n    return String(html).replace(/[\"'&<>]/g, match => escaped[match]);\n}\nfunction escape_attribute_value(value) {\n    return typeof value === 'string' ? escape(value) : value;\n}\nfunction escape_object(obj) {\n    const result = {};\n    for (const key in obj) {\n        result[key] = escape_attribute_value(obj[key]);\n    }\n    return result;\n}\nfunction each(items, fn) {\n    let str = '';\n    for (let i = 0; i < items.length; i += 1) {\n        str += fn(items[i], i);\n    }\n    return str;\n}\nconst missing_component = {\n    $$render: () => ''\n};\nfunction validate_component(component, name) {\n    if (!component || !component.$$render) {\n        if (name === 'svelte:component')\n            name += ' this={...}';\n        throw new Error(`<${name}> is not a valid SSR component. You may need to review your build config to ensure that dependencies are compiled, rather than imported as pre-compiled modules`);\n    }\n    return component;\n}\nfunction debug(file, line, column, values) {\n    console.log(`{@debug} ${file ? file + ' ' : ''}(${line}:${column})`); // eslint-disable-line no-console\n    console.log(values); // eslint-disable-line no-console\n    return '';\n}\nlet on_destroy;\nfunction create_ssr_component(fn) {\n    function $$render(result, props, bindings, slots, context) {\n        const parent_component = current_component;\n        const $$ = {\n            on_destroy,\n            context: new Map(context || (parent_component ? parent_component.$$.context : [])),\n            // these will be immediately discarded\n            on_mount: [],\n            before_update: [],\n            after_update: [],\n            callbacks: blank_object()\n        };\n        set_current_component({ $$ });\n        const html = fn(result, props, bindings, slots);\n        set_current_component(parent_component);\n        return html;\n    }\n    return {\n        render: (props = {}, { $$slots = {}, context = new Map() } = {}) => {\n            on_destroy = [];\n            const result = { title: '', head: '', css: new Set() };\n            const html = $$render(result, props, {}, $$slots, context);\n            run_all(on_destroy);\n            return {\n                html,\n                css: {\n                    code: Array.from(result.css).map(css => css.code).join('\\n'),\n                    map: null // TODO\n                },\n                head: result.title + result.head\n            };\n        },\n        $$render\n    };\n}\nfunction add_attribute(name, value, boolean) {\n    if (value == null || (boolean && !value))\n        return '';\n    return ` ${name}${value === true ? '' : `=${typeof value === 'string' ? JSON.stringify(escape(value)) : `\"${value}\"`}`}`;\n}\nfunction add_classes(classes) {\n    return classes ? ` class=\"${classes}\"` : '';\n}\n\nfunction bind(component, name, callback) {\n    const index = component.$$.props[name];\n    if (index !== undefined) {\n        component.$$.bound[index] = callback;\n        callback(component.$$.ctx[index]);\n    }\n}\nfunction create_component(block) {\n    block && block.c();\n}\nfunction claim_component(block, parent_nodes) {\n    block && block.l(parent_nodes);\n}\nfunction mount_component(component, target, anchor, customElement) {\n    const { fragment, on_mount, on_destroy, after_update } = component.$$;\n    fragment && fragment.m(target, anchor);\n    if (!customElement) {\n        // onMount happens before the initial afterUpdate\n        add_render_callback(() => {\n            const new_on_destroy = on_mount.map(run).filter(is_function);\n            if (on_destroy) {\n                on_destroy.push(...new_on_destroy);\n            }\n            else {\n                // Edge case - component was destroyed immediately,\n                // most likely as a result of a binding initialising\n                run_all(new_on_destroy);\n            }\n            component.$$.on_mount = [];\n        });\n    }\n    after_update.forEach(add_render_callback);\n}\nfunction destroy_component(component, detaching) {\n    const $$ = component.$$;\n    if ($$.fragment !== null) {\n        run_all($$.on_destroy);\n        $$.fragment && $$.fragment.d(detaching);\n        // TODO null out other refs, including component.$$ (but need to\n        // preserve final state?)\n        $$.on_destroy = $$.fragment = null;\n        $$.ctx = [];\n    }\n}\nfunction make_dirty(component, i) {\n    if (component.$$.dirty[0] === -1) {\n        dirty_components.push(component);\n        schedule_update();\n        component.$$.dirty.fill(0);\n    }\n    component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));\n}\nfunction init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {\n    const parent_component = current_component;\n    set_current_component(component);\n    const $$ = component.$$ = {\n        fragment: null,\n        ctx: null,\n        // state\n        props,\n        update: noop,\n        not_equal,\n        bound: blank_object(),\n        // lifecycle\n        on_mount: [],\n        on_destroy: [],\n        on_disconnect: [],\n        before_update: [],\n        after_update: [],\n        context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),\n        // everything else\n        callbacks: blank_object(),\n        dirty,\n        skip_bound: false,\n        root: options.target || parent_component.$$.root\n    };\n    append_styles && append_styles($$.root);\n    let ready = false;\n    $$.ctx = instance\n        ? instance(component, options.props || {}, (i, ret, ...rest) => {\n            const value = rest.length ? rest[0] : ret;\n            if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {\n                if (!$$.skip_bound && $$.bound[i])\n                    $$.bound[i](value);\n                if (ready)\n                    make_dirty(component, i);\n            }\n            return ret;\n        })\n        : [];\n    $$.update();\n    ready = true;\n    run_all($$.before_update);\n    // `false` as a special case of no DOM component\n    $$.fragment = create_fragment ? create_fragment($$.ctx) : false;\n    if (options.target) {\n        if (options.hydrate) {\n            start_hydrating();\n            const nodes = children(options.target);\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.l(nodes);\n            nodes.forEach(detach);\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            $$.fragment && $$.fragment.c();\n        }\n        if (options.intro)\n            transition_in(component.$$.fragment);\n        mount_component(component, options.target, options.anchor, options.customElement);\n        end_hydrating();\n        flush();\n    }\n    set_current_component(parent_component);\n}\nlet SvelteElement;\nif (typeof HTMLElement === 'function') {\n    SvelteElement = class extends HTMLElement {\n        constructor() {\n            super();\n            this.attachShadow({ mode: 'open' });\n        }\n        connectedCallback() {\n            const { on_mount } = this.$$;\n            this.$$.on_disconnect = on_mount.map(run).filter(is_function);\n            // @ts-ignore todo: improve typings\n            for (const key in this.$$.slotted) {\n                // @ts-ignore todo: improve typings\n                this.appendChild(this.$$.slotted[key]);\n            }\n        }\n        attributeChangedCallback(attr, _oldValue, newValue) {\n            this[attr] = newValue;\n        }\n        disconnectedCallback() {\n            run_all(this.$$.on_disconnect);\n        }\n        $destroy() {\n            destroy_component(this, 1);\n            this.$destroy = noop;\n        }\n        $on(type, callback) {\n            // TODO should this delegate to addEventListener?\n            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n            callbacks.push(callback);\n            return () => {\n                const index = callbacks.indexOf(callback);\n                if (index !== -1)\n                    callbacks.splice(index, 1);\n            };\n        }\n        $set($$props) {\n            if (this.$$set && !is_empty($$props)) {\n                this.$$.skip_bound = true;\n                this.$$set($$props);\n                this.$$.skip_bound = false;\n            }\n        }\n    };\n}\n/**\n * Base class for Svelte components. Used when dev=false.\n */\nclass SvelteComponent {\n    $destroy() {\n        destroy_component(this, 1);\n        this.$destroy = noop;\n    }\n    $on(type, callback) {\n        const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));\n        callbacks.push(callback);\n        return () => {\n            const index = callbacks.indexOf(callback);\n            if (index !== -1)\n                callbacks.splice(index, 1);\n        };\n    }\n    $set($$props) {\n        if (this.$$set && !is_empty($$props)) {\n            this.$$.skip_bound = true;\n            this.$$set($$props);\n            this.$$.skip_bound = false;\n        }\n    }\n}\n\nfunction dispatch_dev(type, detail) {\n    document.dispatchEvent(custom_event(type, Object.assign({ version: '3.44.2' }, detail), true));\n}\nfunction append_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append(target, node);\n}\nfunction append_hydration_dev(target, node) {\n    dispatch_dev('SvelteDOMInsert', { target, node });\n    append_hydration(target, node);\n}\nfunction insert_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert(target, node, anchor);\n}\nfunction insert_hydration_dev(target, node, anchor) {\n    dispatch_dev('SvelteDOMInsert', { target, node, anchor });\n    insert_hydration(target, node, anchor);\n}\nfunction detach_dev(node) {\n    dispatch_dev('SvelteDOMRemove', { node });\n    detach(node);\n}\nfunction detach_between_dev(before, after) {\n    while (before.nextSibling && before.nextSibling !== after) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction detach_before_dev(after) {\n    while (after.previousSibling) {\n        detach_dev(after.previousSibling);\n    }\n}\nfunction detach_after_dev(before) {\n    while (before.nextSibling) {\n        detach_dev(before.nextSibling);\n    }\n}\nfunction listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation) {\n    const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];\n    if (has_prevent_default)\n        modifiers.push('preventDefault');\n    if (has_stop_propagation)\n        modifiers.push('stopPropagation');\n    dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });\n    const dispose = listen(node, event, handler, options);\n    return () => {\n        dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });\n        dispose();\n    };\n}\nfunction attr_dev(node, attribute, value) {\n    attr(node, attribute, value);\n    if (value == null)\n        dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });\n    else\n        dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });\n}\nfunction prop_dev(node, property, value) {\n    node[property] = value;\n    dispatch_dev('SvelteDOMSetProperty', { node, property, value });\n}\nfunction dataset_dev(node, property, value) {\n    node.dataset[property] = value;\n    dispatch_dev('SvelteDOMSetDataset', { node, property, value });\n}\nfunction set_data_dev(text, data) {\n    data = '' + data;\n    if (text.wholeText === data)\n        return;\n    dispatch_dev('SvelteDOMSetData', { node: text, data });\n    text.data = data;\n}\nfunction validate_each_argument(arg) {\n    if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {\n        let msg = '{#each} only iterates over array-like objects.';\n        if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {\n            msg += ' You can use a spread to convert this iterable into an array.';\n        }\n        throw new Error(msg);\n    }\n}\nfunction validate_slots(name, slot, keys) {\n    for (const slot_key of Object.keys(slot)) {\n        if (!~keys.indexOf(slot_key)) {\n            console.warn(`<${name}> received an unexpected slot \"${slot_key}\".`);\n        }\n    }\n}\n/**\n * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.\n */\nclass SvelteComponentDev extends SvelteComponent {\n    constructor(options) {\n        if (!options || (!options.target && !options.$$inline)) {\n            throw new Error(\"'target' is a required option\");\n        }\n        super();\n    }\n    $destroy() {\n        super.$destroy();\n        this.$destroy = () => {\n            console.warn('Component was already destroyed'); // eslint-disable-line no-console\n        };\n    }\n    $capture_state() { }\n    $inject_state() { }\n}\n/**\n * Base class to create strongly typed Svelte components.\n * This only exists for typing purposes and should be used in `.d.ts` files.\n *\n * ### Example:\n *\n * You have component library on npm called `component-library`, from which\n * you export a component called `MyComponent`. For Svelte+TypeScript users,\n * you want to provide typings. Therefore you create a `index.d.ts`:\n * ```ts\n * import { SvelteComponentTyped } from \"svelte\";\n * export class MyComponent extends SvelteComponentTyped<{foo: string}> {}\n * ```\n * Typing this makes it possible for IDEs like VS Code with the Svelte extension\n * to provide intellisense and to use the component like this in a Svelte file\n * with TypeScript:\n * ```svelte\n * <script lang=\"ts\">\n * \timport { MyComponent } from \"component-library\";\n * </script>\n * <MyComponent foo={'bar'} />\n * ```\n *\n * #### Why not make this part of `SvelteComponent(Dev)`?\n * Because\n * ```ts\n * class ASubclassOfSvelteComponent extends SvelteComponent<{foo: string}> {}\n * const component: typeof SvelteComponent = ASubclassOfSvelteComponent;\n * ```\n * will throw a type error, so we need to separate the more strictly typed class.\n */\nclass SvelteComponentTyped extends SvelteComponentDev {\n    constructor(options) {\n        super(options);\n    }\n}\nfunction loop_guard(timeout) {\n    const start = Date.now();\n    return () => {\n        if (Date.now() - start > timeout) {\n            throw new Error('Infinite loop detected');\n        }\n    };\n}\n\nexport { HtmlTag, HtmlTagHydration, SvelteComponent, SvelteComponentDev, SvelteComponentTyped, SvelteElement, action_destroyer, add_attribute, add_classes, add_flush_callback, add_location, add_render_callback, add_resize_listener, add_transform, afterUpdate, append, append_dev, append_empty_stylesheet, append_hydration, append_hydration_dev, append_styles, assign, attr, attr_dev, attribute_to_object, beforeUpdate, bind, binding_callbacks, blank_object, bubble, check_outros, children, claim_component, claim_element, claim_html_tag, claim_space, claim_svg_element, claim_text, clear_loops, component_subscribe, compute_rest_props, compute_slots, createEventDispatcher, create_animation, create_bidirectional_transition, create_component, create_in_transition, create_out_transition, create_slot, create_ssr_component, current_component, custom_event, dataset_dev, debug, destroy_block, destroy_component, destroy_each, detach, detach_after_dev, detach_before_dev, detach_between_dev, detach_dev, dirty_components, dispatch_dev, each, element, element_is, empty, end_hydrating, escape, escape_attribute_value, escape_object, escaped, exclude_internal_props, fix_and_destroy_block, fix_and_outro_and_destroy_block, fix_position, flush, getAllContexts, getContext, get_all_dirty_from_scope, get_binding_group_value, get_current_component, get_custom_elements_slots, get_root_for_style, get_slot_changes, get_spread_object, get_spread_update, get_store_value, globals, group_outros, handle_promise, hasContext, has_prop, identity, init, insert, insert_dev, insert_hydration, insert_hydration_dev, intros, invalid_attribute_name_character, is_client, is_crossorigin, is_empty, is_function, is_promise, listen, listen_dev, loop, loop_guard, missing_component, mount_component, noop, not_equal, now, null_to_empty, object_without_properties, onDestroy, onMount, once, outro_and_destroy_block, prevent_default, prop_dev, query_selector_all, raf, run, run_all, safe_not_equal, schedule_update, select_multiple_value, select_option, select_options, select_value, self, setContext, set_attributes, set_current_component, set_custom_element_data, set_data, set_data_dev, set_input_type, set_input_value, set_now, set_raf, set_store_value, set_style, set_svg_attributes, space, spread, src_url_equal, start_hydrating, stop_propagation, subscribe, svg_element, text, tick, time_ranges_to_array, to_number, toggle_class, transition_in, transition_out, trusted, update_await_block_branch, update_keyed_each, update_slot, update_slot_base, validate_component, validate_each_argument, validate_each_keys, validate_slots, validate_store, xlink_attr };\n","export const areStringsSimilar = (s1, s2) => {\r\n    const stringSimilarity = getStringSimilarity(standardizeString(s1), standardizeString(s2));\r\n    return stringSimilarity >= 0.6;\r\n};\r\nconst getStringSimilarity = (s1, s2) => {\r\n    // If they don't start with the same letter, the guess is way off anyway\r\n    if (s1[0] != s2[0])\r\n        return 0;\r\n    return 1 - (levenshteinDistance(s1, s2) * 1.0) / s1.length;\r\n};\r\nconst wordsToIgnore = [\"the\", \"and\", \"of\", \"an\", \"a\", \"from\", \"in\"];\r\nexport const standardizeString = (s) => {\r\n    return s\r\n        .toLowerCase()\r\n        .split(\" \")\r\n        .filter((word) => !wordsToIgnore.includes(word))\r\n        .join(\"\")\r\n        .replace(/[^0-9a-zA-Z]/g, \"\");\r\n};\r\n/*\r\nMIT License\r\n\r\nCopyright (c) 2017 Gustaf Andersson\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n*/\r\n/* eslint-disable */\r\nconst _min = (d0, d1, d2, bx, ay) => {\r\n    return d0 < d1 || d2 < d1 ? (d0 > d2 ? d2 + 1 : d0 + 1) : bx === ay ? d1 : d1 + 1;\r\n};\r\nconst levenshteinDistance = (a, b) => {\r\n    if (a === b) {\r\n        return 0;\r\n    }\r\n    if (a.length > b.length) {\r\n        var tmp = a;\r\n        a = b;\r\n        b = tmp;\r\n    }\r\n    var la = a.length;\r\n    var lb = b.length;\r\n    while (la > 0 && a.charCodeAt(la - 1) === b.charCodeAt(lb - 1)) {\r\n        la--;\r\n        lb--;\r\n    }\r\n    var offset = 0;\r\n    while (offset < la && a.charCodeAt(offset) === b.charCodeAt(offset)) {\r\n        offset++;\r\n    }\r\n    la -= offset;\r\n    lb -= offset;\r\n    if (la === 0 || lb < 3) {\r\n        return lb;\r\n    }\r\n    var x = 0;\r\n    var y;\r\n    var d0;\r\n    var d1;\r\n    var d2;\r\n    var d3;\r\n    var dd = 0;\r\n    var dy;\r\n    var ay;\r\n    var bx0;\r\n    var bx1;\r\n    var bx2;\r\n    var bx3;\r\n    var vector = [];\r\n    for (y = 0; y < la; y++) {\r\n        vector.push(y + 1);\r\n        vector.push(a.charCodeAt(offset + y));\r\n    }\r\n    var len = vector.length - 1;\r\n    for (; x < lb - 3;) {\r\n        bx0 = b.charCodeAt(offset + (d0 = x));\r\n        bx1 = b.charCodeAt(offset + (d1 = x + 1));\r\n        bx2 = b.charCodeAt(offset + (d2 = x + 2));\r\n        bx3 = b.charCodeAt(offset + (d3 = x + 3));\r\n        dd = x += 4;\r\n        for (y = 0; y < len; y += 2) {\r\n            dy = vector[y];\r\n            ay = vector[y + 1];\r\n            d0 = _min(dy, d0, d1, bx0, ay);\r\n            d1 = _min(d0, d1, d2, bx1, ay);\r\n            d2 = _min(d1, d2, d3, bx2, ay);\r\n            dd = _min(d2, d3, dd, bx3, ay);\r\n            vector[y] = dd;\r\n            d3 = d2;\r\n            d2 = d1;\r\n            d1 = d0;\r\n            d0 = dy;\r\n        }\r\n    }\r\n    for (; x < lb;) {\r\n        bx0 = b.charCodeAt(offset + (d0 = x));\r\n        dd = ++x;\r\n        for (y = 0; y < len; y += 2) {\r\n            dy = vector[y];\r\n            vector[y] = dd = _min(dy, d0, dd, bx0, vector[y + 1]);\r\n            d0 = dy;\r\n        }\r\n    }\r\n    return dd;\r\n};\r\n","import { standardizeString } from \"../../generic/strings\";\r\nexport var NflTeam;\r\n(function (NflTeam) {\r\n    NflTeam[NflTeam[\"LAS_VEGAS_RAIDERS\"] = 0] = \"LAS_VEGAS_RAIDERS\";\r\n    NflTeam[NflTeam[\"KANSAS_CITY_CHIEFS\"] = 1] = \"KANSAS_CITY_CHIEFS\";\r\n    NflTeam[NflTeam[\"DALLAS_COWBOYS\"] = 2] = \"DALLAS_COWBOYS\";\r\n    NflTeam[NflTeam[\"CAROLINA_PANTHERS\"] = 3] = \"CAROLINA_PANTHERS\";\r\n    NflTeam[NflTeam[\"NEW_ORLEANS_SAINTS\"] = 4] = \"NEW_ORLEANS_SAINTS\";\r\n    NflTeam[NflTeam[\"DENVER_BRONCOS\"] = 5] = \"DENVER_BRONCOS\";\r\n    NflTeam[NflTeam[\"WASHINGTON_FOOTBALL_TEAM\"] = 6] = \"WASHINGTON_FOOTBALL_TEAM\";\r\n    NflTeam[NflTeam[\"CLEVELAND_BROWNS\"] = 7] = \"CLEVELAND_BROWNS\";\r\n    NflTeam[NflTeam[\"DETROIT_LIONS\"] = 8] = \"DETROIT_LIONS\";\r\n    NflTeam[NflTeam[\"NEW_ENGLAND_PATRIOTS\"] = 9] = \"NEW_ENGLAND_PATRIOTS\";\r\n    NflTeam[NflTeam[\"MIAMI_DOLPHINS\"] = 10] = \"MIAMI_DOLPHINS\";\r\n    NflTeam[NflTeam[\"PITTSBURGH_STEELERS\"] = 11] = \"PITTSBURGH_STEELERS\";\r\n    NflTeam[NflTeam[\"BUFFALO_BILLS\"] = 12] = \"BUFFALO_BILLS\";\r\n    NflTeam[NflTeam[\"GREEN_BAY_PACKERS\"] = 13] = \"GREEN_BAY_PACKERS\";\r\n    NflTeam[NflTeam[\"SAN_FRANCISCO_49ERS\"] = 14] = \"SAN_FRANCISCO_49ERS\";\r\n    NflTeam[NflTeam[\"PHILADELPHIA_EAGLES\"] = 15] = \"PHILADELPHIA_EAGLES\";\r\n    NflTeam[NflTeam[\"INDIANAPOLIS_COLTS\"] = 16] = \"INDIANAPOLIS_COLTS\";\r\n    NflTeam[NflTeam[\"SEATTLE_SEAHAWKS\"] = 17] = \"SEATTLE_SEAHAWKS\";\r\n    NflTeam[NflTeam[\"BALTIMORE_RAVENS\"] = 18] = \"BALTIMORE_RAVENS\";\r\n    NflTeam[NflTeam[\"ATLANTA_FALCONS\"] = 19] = \"ATLANTA_FALCONS\";\r\n    NflTeam[NflTeam[\"NEW_YORK_JETS\"] = 20] = \"NEW_YORK_JETS\";\r\n    NflTeam[NflTeam[\"NEW_YORK_GIANTS\"] = 21] = \"NEW_YORK_GIANTS\";\r\n    NflTeam[NflTeam[\"TENNESSEE_TITANS\"] = 22] = \"TENNESSEE_TITANS\";\r\n    NflTeam[NflTeam[\"HOUSTON_TEXANS\"] = 23] = \"HOUSTON_TEXANS\";\r\n    NflTeam[NflTeam[\"CINCINNATI_BENGALS\"] = 24] = \"CINCINNATI_BENGALS\";\r\n    NflTeam[NflTeam[\"TAMPA_BAY_BUCCANEERS\"] = 25] = \"TAMPA_BAY_BUCCANEERS\";\r\n    NflTeam[NflTeam[\"LOS_ANGELES_RAMS\"] = 26] = \"LOS_ANGELES_RAMS\";\r\n    NflTeam[NflTeam[\"LOS_ANGELES_CHARGERS\"] = 27] = \"LOS_ANGELES_CHARGERS\";\r\n    NflTeam[NflTeam[\"CHICAGO_BEARS\"] = 28] = \"CHICAGO_BEARS\";\r\n    NflTeam[NflTeam[\"ARIZONA_CARDINALS\"] = 29] = \"ARIZONA_CARDINALS\";\r\n    NflTeam[NflTeam[\"JACKSONVILLE_JAGUARS\"] = 30] = \"JACKSONVILLE_JAGUARS\";\r\n    NflTeam[NflTeam[\"MINNESOTA_VIKINGS\"] = 31] = \"MINNESOTA_VIKINGS\";\r\n    // Not really \"teams\", but we need to show them\r\n    NflTeam[NflTeam[\"NFL_MEXICO_GAME\"] = 32] = \"NFL_MEXICO_GAME\";\r\n    NflTeam[NflTeam[\"HALL_OF_FAME_GAME\"] = 33] = \"HALL_OF_FAME_GAME\";\r\n    NflTeam[NflTeam[\"NFL_LONDON_GAME\"] = 34] = \"NFL_LONDON_GAME\";\r\n    NflTeam[NflTeam[\"NFL_LONDON_GAME2\"] = 35] = \"NFL_LONDON_GAME2\";\r\n})(NflTeam || (NflTeam = {}));\r\nexport function getTeamInfo(teamName) {\r\n    switch (teamName) {\r\n        case NflTeam.LAS_VEGAS_RAIDERS:\r\n            return {\r\n                stadiumNames: [\"Allegiant Stadium\", \"Allegiant\"],\r\n                cityNames: [\"Paradise, Nevada\"],\r\n                teamNames: [\"Las Vegas Raiders\", \"Raiders\"],\r\n            };\r\n        case NflTeam.KANSAS_CITY_CHIEFS:\r\n            return {\r\n                stadiumNames: [\r\n                    \"Geha Field at Arrowhead Stadium\",\r\n                    \"Geha Field\",\r\n                    \"Arrowhead Stadium\",\r\n                    \"Geha\",\r\n                    \"Arrowhead\",\r\n                ],\r\n                cityNames: [\"Kansas City, Missouri\"],\r\n                teamNames: [\"Kansas City Chiefs\", \"Chiefs\"],\r\n            };\r\n        case NflTeam.DALLAS_COWBOYS:\r\n            return {\r\n                stadiumNames: [\"AT&T Stadium\", \"AT&T\"],\r\n                cityNames: [\"Arlington, Texas\"],\r\n                teamNames: [\"Dallas Cowboys\", \"Cowboys\"],\r\n            };\r\n        case NflTeam.CAROLINA_PANTHERS:\r\n            return {\r\n                stadiumNames: [\"Bank of America Stadium\", \"BOA stadium\", \"BOA\", \"Bank of America\"],\r\n                cityNames: [\"Charlotte, North Carolina\"],\r\n                teamNames: [\"Carolina Panthers\", \"Panthers\"],\r\n            };\r\n        case NflTeam.NEW_ORLEANS_SAINTS:\r\n            return {\r\n                stadiumNames: [\"Caesars Superdome\", \"Superdome\"],\r\n                cityNames: [\"New Orleans, Louisiana\"],\r\n                teamNames: [\"New Orleans Saints\", \"Saints\"],\r\n            };\r\n        case NflTeam.DENVER_BRONCOS:\r\n            return {\r\n                stadiumNames: [\"Empower Field at Mile High\", \"Mile High\", \"New Mile High\", \"Mile High Stadium\"],\r\n                cityNames: [\"Denver, Colorado\"],\r\n                teamNames: [\"Denver Broncos\", \"Broncos\"],\r\n            };\r\n        case NflTeam.WASHINGTON_FOOTBALL_TEAM:\r\n            return {\r\n                stadiumNames: [\"FedExField\", \"FedEx\"],\r\n                cityNames: [\"Landover, Maryland\"],\r\n                teamNames: [\"Washington Football Team\", \"Washington Football Team\"],\r\n            };\r\n        case NflTeam.CLEVELAND_BROWNS:\r\n            return {\r\n                stadiumNames: [\"FirstEnergy Stadium\", \"FirstEnergy\"],\r\n                cityNames: [\"Cleveland, Ohio\"],\r\n                teamNames: [\"Cleveland Browns\", \"Browns\"],\r\n            };\r\n        case NflTeam.DETROIT_LIONS:\r\n            return {\r\n                stadiumNames: [\"Ford Field\", \"Ford\"],\r\n                cityNames: [\"Detroit, Michigan\"],\r\n                teamNames: [\"Detroit Lions\", \"Lions\"],\r\n            };\r\n        case NflTeam.NEW_ENGLAND_PATRIOTS:\r\n            return {\r\n                stadiumNames: [\"Gillette Stadium\", \"Gillette\"],\r\n                cityNames: [\"Foxborough, Massachusetts\"],\r\n                teamNames: [\"New England Patriots\", \"Patriots\"],\r\n            };\r\n        case NflTeam.MIAMI_DOLPHINS:\r\n            return {\r\n                stadiumNames: [\"Hard Rock Stadium\", \"Hard Rock\"],\r\n                cityNames: [\"Miami Gardens, Florida\"],\r\n                teamNames: [\"Miami Dolphins\", \"Dolphins\"],\r\n            };\r\n        case NflTeam.PITTSBURGH_STEELERS:\r\n            return {\r\n                stadiumNames: [\"Heinz Field\", \"Heinz\"],\r\n                cityNames: [\"Pittsburgh, Pennsylvania\"],\r\n                teamNames: [\"Pittsburgh Steelers\", \"Steelers\"],\r\n            };\r\n        case NflTeam.BUFFALO_BILLS:\r\n            return {\r\n                stadiumNames: [\"Highmark Stadium\", \"Highmark\"],\r\n                cityNames: [\"Orchard Park, New York\"],\r\n                teamNames: [\"Buffalo Bills\", \"Bills\"],\r\n            };\r\n        case NflTeam.GREEN_BAY_PACKERS:\r\n            return {\r\n                stadiumNames: [\"Lambeau Field\", \"Lambeau\"],\r\n                cityNames: [\"Green Bay, Wisconsin\"],\r\n                teamNames: [\"Green Bay Packers\", \"Packers\"],\r\n            };\r\n        case NflTeam.SAN_FRANCISCO_49ERS:\r\n            return {\r\n                stadiumNames: [\"Levi's Stadium\", \"Levi's\"],\r\n                cityNames: [\"Santa Clara, California\"],\r\n                teamNames: [\"San Francisco 49ers\", \"49ers\"],\r\n            };\r\n        case NflTeam.PHILADELPHIA_EAGLES:\r\n            return {\r\n                stadiumNames: [\"Lincoln Financial Field\", \"Lincoln Financial\", \"Lincoln\"],\r\n                cityNames: [\"Philadelphia, Pennsylvania\"],\r\n                teamNames: [\"Philadelphia Eagles\", \"Eagles\"],\r\n            };\r\n        case NflTeam.INDIANAPOLIS_COLTS:\r\n            return {\r\n                stadiumNames: [\"Lucas Oil Stadium\", \"Lucas Oil\"],\r\n                cityNames: [\"Indianapolis, Indiana\"],\r\n                teamNames: [\"Indianapolis Colts\", \"Colts\"],\r\n            };\r\n        case NflTeam.SEATTLE_SEAHAWKS:\r\n            return {\r\n                stadiumNames: [\"Lumen Field\", \"Lumen\"],\r\n                cityNames: [\"Seattle, Washington\"],\r\n                teamNames: [\"Seattle Seahawks\", \"Seahawks\"],\r\n            };\r\n        case NflTeam.BALTIMORE_RAVENS:\r\n            return {\r\n                stadiumNames: [\"M&T Bank Stadium\", \"M&T Bank\"],\r\n                cityNames: [\"Baltimore, Maryland\"],\r\n                teamNames: [\"Baltimore Ravens\", \"Ravens\"],\r\n            };\r\n        case NflTeam.ATLANTA_FALCONS:\r\n            return {\r\n                stadiumNames: [\"Mercedes-Benz Stadium\", \"Mercedes\", \"Mercedes-Benz\"],\r\n                cityNames: [\"Atlanta, Georgia\"],\r\n                teamNames: [\"Atlanta Falcons\", \"Falcons\"],\r\n            };\r\n        case NflTeam.NEW_YORK_GIANTS:\r\n            return {\r\n                stadiumNames: [\"MetLife Stadium\", \"MetLife\"],\r\n                cityNames: [\"East Rutherford, New Jersey\"],\r\n                teamNames: [\"New York Giants\", \"Giants\"],\r\n            };\r\n        case NflTeam.NEW_YORK_JETS:\r\n            return {\r\n                stadiumNames: [\"MetLife Stadium\", \"MetLife\"],\r\n                cityNames: [\"East Rutherford, New Jersey\"],\r\n                teamNames: [\"New York Jets\", \"Jets\"],\r\n            };\r\n        case NflTeam.TENNESSEE_TITANS:\r\n            return {\r\n                stadiumNames: [\"Nissan Stadium\", \"Nissan\"],\r\n                cityNames: [\"Nashville, Tennessee\"],\r\n                teamNames: [\"Tennessee Titans\", \"Titans\"],\r\n            };\r\n        case NflTeam.HOUSTON_TEXANS:\r\n            return {\r\n                stadiumNames: [\"NRG Stadium\", \"NRG\"],\r\n                cityNames: [\"Houston, Texas\"],\r\n                teamNames: [\"Houston Texans\", \"Texans\"],\r\n            };\r\n        case NflTeam.CINCINNATI_BENGALS:\r\n            return {\r\n                stadiumNames: [\"Paul Brown Stadium\", \"Paul Brown\"],\r\n                cityNames: [\"Cincinnati, Ohio\"],\r\n                teamNames: [\"Cincinnati Bengals\", \"Bengals\"],\r\n            };\r\n        case NflTeam.TAMPA_BAY_BUCCANEERS:\r\n            return {\r\n                stadiumNames: [\"Raymond James Stadium\", \"Raymond James\"],\r\n                cityNames: [\"Tampa, Florida\"],\r\n                teamNames: [\"Tampa Bay Buccaneers\", \"Buccaneers\"],\r\n            };\r\n        case NflTeam.LOS_ANGELES_RAMS:\r\n            return {\r\n                stadiumNames: [\"SoFi Stadium\", \"SoFi\"],\r\n                cityNames: [\"Inglewood, California\"],\r\n                teamNames: [\"Los Angeles Rams\", \"Rams\"],\r\n            };\r\n        case NflTeam.LOS_ANGELES_CHARGERS:\r\n            return {\r\n                stadiumNames: [\"SoFi Stadium\", \"SoFi\"],\r\n                cityNames: [\"Inglewood, California\"],\r\n                teamNames: [\"Los Angeles Chargers\", \"Chargers\"],\r\n            };\r\n        case NflTeam.CHICAGO_BEARS:\r\n            return {\r\n                stadiumNames: [\"Soldier Field\", \"Soldier\"],\r\n                cityNames: [\"Chicago, Illinois\"],\r\n                teamNames: [\"Chicago Bears\", \"Bears\"],\r\n            };\r\n        case NflTeam.ARIZONA_CARDINALS:\r\n            return {\r\n                stadiumNames: [\"State Farm Stadium\", \"Start Farm\"],\r\n                cityNames: [\"Glendale, Arizona\"],\r\n                teamNames: [\"Arizona Cardinals\", \"Cardinals\"],\r\n            };\r\n        case NflTeam.JACKSONVILLE_JAGUARS:\r\n            return {\r\n                stadiumNames: [\"TIAA Bank Field\", \"TIAA Bank\", \"TIAA\"],\r\n                cityNames: [\"Jacksonville, Florida\"],\r\n                teamNames: [\"Jacksonville Jaguars\", \"Jaguars\"],\r\n            };\r\n        case NflTeam.MINNESOTA_VIKINGS:\r\n            return {\r\n                stadiumNames: [\"U.S. Bank Stadium\", \"U.S. Bank\"],\r\n                cityNames: [\"Minneapolis, Minnesota\"],\r\n                teamNames: [\"Minnesota Vikings\", \"Vikings\"],\r\n            };\r\n        case NflTeam.NFL_MEXICO_GAME:\r\n            return {\r\n                stadiumNames: [\"Estadio Azteca\"],\r\n                cityNames: [\"Mexico City, Mexico\"],\r\n                teamNames: [\"NFL Mexico Games\", \"NFL Mexico Games\"],\r\n            };\r\n        case NflTeam.HALL_OF_FAME_GAME:\r\n            return {\r\n                stadiumNames: [\"Tom Benson Hall of Fame Stadium\", \"Tom Benson Hall of Fame\", \"Tom Benson\"],\r\n                cityNames: [\"Canton Ohio\"],\r\n                teamNames: [\"Hall of Fame Games\", \"Hall of Fame Games\"],\r\n            };\r\n        case NflTeam.NFL_LONDON_GAME:\r\n            return {\r\n                stadiumNames: [\"Wembley Stadium\", \"Wembley\"],\r\n                cityNames: [\"London, England\"],\r\n                teamNames: [\"old NFL London Games\", \"old NFL London Games\"],\r\n            };\r\n        case NflTeam.NFL_LONDON_GAME2:\r\n            return {\r\n                stadiumNames: [\"Tottenham Hotspur Stadium\", \"Tottenham Hotspur\"],\r\n                cityNames: [\"London, England\"],\r\n                teamNames: [\"new NFL London Games\", \"new NFL London Games\"],\r\n            };\r\n    }\r\n}\r\nexport const allKeys = Object.values(NflTeam).filter((x) => typeof x == \"string\");\r\nfunction x() {\r\n    const result = new Map();\r\n    for (let i = 0; i < allKeys.length; i++) {\r\n        const team = NflTeam[allKeys[i]];\r\n        const teamInfo = getTeamInfo(team);\r\n        for (let j = 0; j < teamInfo.stadiumNames.length; j++) {\r\n            result.set(standardizeString(teamInfo.stadiumNames[j]), teamInfo.stadiumNames[0]);\r\n        }\r\n    }\r\n    return result;\r\n}\r\nexport const possibleGuessToOfficialGuess = x();\r\nexport function guessToKeys(guess) {\r\n    const result = [];\r\n    for (let i = 0; i < allKeys.length; i++) {\r\n        const team = NflTeam[allKeys[i]];\r\n        const teamInfo = getTeamInfo(team);\r\n        if (teamInfo.stadiumNames[0] === guess)\r\n            result.push(allKeys[i]);\r\n    }\r\n    return result;\r\n}\r\n","export const shuffle = (array) => {\r\n    let currentIndex = array.length;\r\n    let randomIndex;\r\n    while (currentIndex != 0) {\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex--;\r\n        [array[currentIndex], array[randomIndex]] = [array[randomIndex], array[currentIndex]];\r\n    }\r\n    return array;\r\n};\r\n","import { standardizeString } from \"./strings\";\r\nexport const setStats = (key, wasGuessCorrect, guess, getOfficialGuess) => {\r\n    const statsString = localStorage.getItem(key);\r\n    const stats = statsString\r\n        ? JSON.parse(statsString)\r\n        : {\r\n            numCorrectGuesses: 0,\r\n            numIncorrectGuesses: 0,\r\n            numTotalGuesses: 0,\r\n            percentCorrect: 0.0,\r\n            incorrectGuesses: [],\r\n        };\r\n    stats.numTotalGuesses += 1;\r\n    if (wasGuessCorrect) {\r\n        stats.numCorrectGuesses += 1;\r\n    }\r\n    else {\r\n        stats.numIncorrectGuesses += 1;\r\n        let standardizedGuess = getOfficialGuess(standardizeString(guess));\r\n        if (standardizedGuess == null)\r\n            standardizedGuess = guess.trim();\r\n        if (standardizedGuess && !stats.incorrectGuesses.includes(standardizedGuess)) {\r\n            stats.incorrectGuesses.push(standardizedGuess);\r\n        }\r\n    }\r\n    stats.percentCorrect = stats.numCorrectGuesses / stats.numTotalGuesses;\r\n    localStorage.setItem(key, JSON.stringify(stats));\r\n};\r\nexport const getStats = (key) => {\r\n    const statsString = localStorage.getItem(key);\r\n    if (statsString) {\r\n        return JSON.parse(statsString);\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n};\r\nexport const getQuestionSetString = (triviaCategory) => {\r\n    return localStorage.getItem(`${triviaCategory}-question-set`) || \"All\";\r\n};\r\nexport const getMode = () => {\r\n    return localStorage.getItem(\"mode\") || \"Show unseen mode\";\r\n};\r\nexport const getShouldReshowUnknown = () => {\r\n    return localStorage.getItem(\"shouldReshowUnknown\") !== \"false\";\r\n};\r\n","import { shuffle } from \"./utils\";\r\nimport * as storage from \"./storage\";\r\nexport class QuestionSetHandler {\r\n    constructor() {\r\n        /**\r\n         * Given a key `K`, returns a list [K, K_1, ..., K_n] where each\r\n         * element is associated with K. Usually, this should just be [K],\r\n         * but if there are multiple keys with the same value, this function\r\n         * may be useful:\r\n         * \"Washington State\" => \"Olympia\" (state capitals)\r\n         * \"New York Jets\" -> [\"New York Jets\", \"New York Giants\"] (stadium names)\r\n         */\r\n        this.getAllAssociatedKeys = (key) => {\r\n            return [key];\r\n        };\r\n        this.getQuestionSet = (questionSetString) => {\r\n            const questionSets = this.getQuestionSets();\r\n            for (let i = 0; i < questionSets.length; i++) {\r\n                if (questionSetString === questionSets[i].description) {\r\n                    return shuffle([...questionSets[i].questions]);\r\n                }\r\n            }\r\n            return shuffle([...questionSets[0].questions]);\r\n        };\r\n        /** Returns length of new eligible questions list */\r\n        this.recalculateEligibleQuestions = () => {\r\n            const mode = storage.getMode();\r\n            let questionSet = this.getQuestionSet(storage.getQuestionSetString(this.questionType));\r\n            if (mode == \"Show unseen mode\") {\r\n                const seenQuestions = Object.keys(localStorage);\r\n                questionSet = questionSet.filter((question) => !seenQuestions.includes(question));\r\n            }\r\n            else if (mode == \"Show unknown mode\") {\r\n                questionSet = questionSet.filter((question) => {\r\n                    const stats = storage.getStats(question);\r\n                    return stats ? stats.percentCorrect < 0.6 || stats.numCorrectGuesses < 2 : true;\r\n                });\r\n            }\r\n            if (questionSet.length == 0) {\r\n                const allQuestions = shuffle(this.getQuestionSet(\"All\"));\r\n                questionSet = allQuestions;\r\n            }\r\n            this.eligibleQuestions = questionSet;\r\n            this.numNonReshownQuestionsAnswered = -1;\r\n            this.numAllQuestionsAnswered = -1;\r\n            this.numEligibleQuestions = this.eligibleQuestions.length;\r\n        };\r\n        this.getNextQuestion = (currentQuestion) => {\r\n            let result;\r\n            if (this.numAllQuestionsAnswered > 1 && // Don't immediately reshow first incorrect answer\r\n                this.numAllQuestionsAnswered % 5 == 0 &&\r\n                this.eligibleQuestions.length > 5 && // Avoid excessive repeats when not a lot of questions\r\n                storage.getShouldReshowUnknown()) {\r\n                const questionSet = this.getQuestionSet(storage.getQuestionSetString(this.questionType));\r\n                for (let i = 0; i < questionSet.length; i++) {\r\n                    const stats = storage.getStats(questionSet[i]);\r\n                    if (stats && questionSet[i] != currentQuestion && stats.percentCorrect < 0.6) {\r\n                        result = questionSet[i];\r\n                        this.numAllQuestionsAnswered++;\r\n                        return result;\r\n                    }\r\n                }\r\n            }\r\n            if (this.eligibleQuestions.length == 0)\r\n                this.recalculateEligibleQuestions();\r\n            result = this.eligibleQuestions.pop();\r\n            this.numNonReshownQuestionsAnswered = (this.numNonReshownQuestionsAnswered + 1) % this.numEligibleQuestions;\r\n            this.numAllQuestionsAnswered++;\r\n            return result;\r\n        };\r\n    }\r\n}\r\n","import { NflTeam, getTeamInfo, allKeys, possibleGuessToOfficialGuess, guessToKeys } from \"./data\";\r\nimport { QuestionSetHandler } from \"../../generic/QuestionSetHandler\";\r\nimport { areStringsSimilar, standardizeString } from \"../../generic/strings\";\r\nexport const questionSetHandler = new (class extends QuestionSetHandler {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.questionType = \"NFL stadiums\";\r\n        this.answerType = \"Stadium\";\r\n        this.allKeys = allKeys;\r\n        this.doesGuessExist = (guess) => {\r\n            return this.getOfficialGuess(guess) != undefined;\r\n        };\r\n        this.getKeysFromGuess = (guess) => {\r\n            const officializedGuess = this.getOfficialGuess(guess);\r\n            if (officializedGuess) {\r\n                return guessToKeys(officializedGuess);\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        };\r\n        this.getAllAssociatedKeys = (key) => {\r\n            if (key === \"New York Jets\" || key === \"New York Giants\") {\r\n                return [\"New York Jets\", \"New York Giants\"];\r\n            }\r\n            else if (key === \"Los Angeles Rams\" || key === \"Los Angeles Chargers\") {\r\n                return [\"Los Angeles Rams\", \"Los Angeles Chargers\"];\r\n            }\r\n            else {\r\n                return [key];\r\n            }\r\n        };\r\n        this.isCorrectAnswer = (currentKey, userInput) => {\r\n            const team = NflTeam[currentKey];\r\n            const stadiumNames = getTeamInfo(team).stadiumNames;\r\n            for (let i = 0; i < stadiumNames.length; i++) {\r\n                if (areStringsSimilar(stadiumNames[i], userInput))\r\n                    return true;\r\n            }\r\n            return false;\r\n        };\r\n        this.getOfficialGuess = (guess) => {\r\n            return possibleGuessToOfficialGuess.get(standardizeString(guess));\r\n        };\r\n        this.getQuestionSets = () => {\r\n            return [\r\n                {\r\n                    description: \"All\",\r\n                    questions: this.allKeys,\r\n                },\r\n                {\r\n                    description: \"Additional stadiums\",\r\n                    questions: [\r\n                        NflTeam.NFL_MEXICO_GAME,\r\n                        NflTeam.HALL_OF_FAME_GAME,\r\n                        NflTeam.NFL_LONDON_GAME,\r\n                        NflTeam.NFL_LONDON_GAME2,\r\n                    ].map((team) => NflTeam[team]),\r\n                },\r\n                {\r\n                    description: \"AFC\",\r\n                    questions: [\r\n                        NflTeam.BUFFALO_BILLS,\r\n                        NflTeam.MIAMI_DOLPHINS,\r\n                        NflTeam.NEW_ENGLAND_PATRIOTS,\r\n                        NflTeam.NEW_YORK_JETS,\r\n                        NflTeam.BALTIMORE_RAVENS,\r\n                        NflTeam.CINCINNATI_BENGALS,\r\n                        NflTeam.CLEVELAND_BROWNS,\r\n                        NflTeam.PITTSBURGH_STEELERS,\r\n                        NflTeam.HOUSTON_TEXANS,\r\n                        NflTeam.INDIANAPOLIS_COLTS,\r\n                        NflTeam.JACKSONVILLE_JAGUARS,\r\n                        NflTeam.TENNESSEE_TITANS,\r\n                        NflTeam.DENVER_BRONCOS,\r\n                        NflTeam.KANSAS_CITY_CHIEFS,\r\n                        NflTeam.LAS_VEGAS_RAIDERS,\r\n                        NflTeam.LOS_ANGELES_CHARGERS,\r\n                    ].map((team) => NflTeam[team]),\r\n                },\r\n                {\r\n                    description: \"NFC\",\r\n                    questions: [\r\n                        NflTeam.DALLAS_COWBOYS,\r\n                        NflTeam.NEW_YORK_GIANTS,\r\n                        NflTeam.PHILADELPHIA_EAGLES,\r\n                        NflTeam.WASHINGTON_FOOTBALL_TEAM,\r\n                        NflTeam.CHICAGO_BEARS,\r\n                        NflTeam.DETROIT_LIONS,\r\n                        NflTeam.GREEN_BAY_PACKERS,\r\n                        NflTeam.MINNESOTA_VIKINGS,\r\n                        NflTeam.ATLANTA_FALCONS,\r\n                        NflTeam.CAROLINA_PANTHERS,\r\n                        NflTeam.NEW_ORLEANS_SAINTS,\r\n                        NflTeam.TAMPA_BAY_BUCCANEERS,\r\n                        NflTeam.ARIZONA_CARDINALS,\r\n                        NflTeam.LOS_ANGELES_RAMS,\r\n                        NflTeam.SAN_FRANCISCO_49ERS,\r\n                        NflTeam.SEATTLE_SEAHAWKS,\r\n                    ].map((team) => NflTeam[team]),\r\n                },\r\n                {\r\n                    description: \"Banks\",\r\n                    questions: [\r\n                        NflTeam.CAROLINA_PANTHERS,\r\n                        NflTeam.BALTIMORE_RAVENS,\r\n                        NflTeam.JACKSONVILLE_JAGUARS,\r\n                        NflTeam.MINNESOTA_VIKINGS,\r\n                    ].map((team) => NflTeam[team]),\r\n                },\r\n            ];\r\n        };\r\n    }\r\n})();\r\n","<script lang=\"ts\">\r\n    import { Stats } from \"./storage\";\r\n    import { QuestionSetHandler } from \"./QuestionSetHandler\";\r\n\r\n    export let questionSetHandler: QuestionSetHandler;\r\n\r\n    export let wasCorrectAnswer: boolean;\r\n    export let currentKey: string;\r\n    export let stats: Stats | null;\r\n</script>\r\n\r\n<p id=\"results\">\r\n    {#if wasCorrectAnswer}\r\n        Correct! <slot name=\"answer\" keys={questionSetHandler.getAllAssociatedKeys(currentKey)} />\r\n    {:else}\r\n        Wrong! <slot name=\"answer\" keys={questionSetHandler.getAllAssociatedKeys(currentKey)} />\r\n    {/if}\r\n</p>\r\n<!-- svelte-ignore a11y-autofocus -->\r\n<button id=\"next-button\" on:click autofocus>Next</button>\r\n<section id=\"additional-info\">\r\n    {#if stats}\r\n        You've gotten this right <b>{stats.numCorrectGuesses}/{stats.numTotalGuesses}</b>\r\n        (<b>{(stats.percentCorrect * 100).toFixed()}%</b>) times.\r\n        {#if stats.incorrectGuesses.length > 0}\r\n            Previous guesses:\r\n            <ul>\r\n                {#each stats.incorrectGuesses as guess}\r\n                    {#if questionSetHandler.doesGuessExist(guess)}\r\n                        <li>\r\n                            <slot name=\"previous-answer\" keys={questionSetHandler.getKeysFromGuess(guess)} />\r\n                        </li>\r\n                    {:else}\r\n                        <li>{guess} (not a {questionSetHandler.answerType.toLowerCase()})</li>\r\n                    {/if}\r\n                {/each}\r\n            </ul>\r\n        {/if}\r\n    {/if}\r\n</section>\r\n\r\n<style>\r\n    #results,\r\n    #additional-info {\r\n        margin: 12px 0px;\r\n    }\r\n    #results {\r\n        padding-top: 0px;\r\n        padding-bottom: 0px;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import { createEventDispatcher } from \"svelte\";\r\n    import { QuestionSetHandler } from \"./QuestionSetHandler\";\r\n    import * as storage from \"./storage\";\r\n\r\n    export let questionSetHandler: QuestionSetHandler;\r\n\r\n    let dispatch = createEventDispatcher();\r\n\r\n    let oldQuestionSet = storage.getQuestionSetString(questionSetHandler.triviaCategory);\r\n    let oldQuestionsToFilterOut = storage.getMode();\r\n\r\n    let questionSetValue = oldQuestionSet;\r\n    let questionsToFilterOut = oldQuestionsToFilterOut;\r\n    let reshowQuestions = storage.getShouldReshowUnknown();\r\n\r\n    const handleSaveSettings = (): void => {\r\n        const wasSettingsUpdated =\r\n            questionSetValue != oldQuestionSet || questionsToFilterOut != oldQuestionsToFilterOut;\r\n\r\n        if (wasSettingsUpdated) {\r\n            localStorage.setItem(`${questionSetHandler.triviaCategory}-question-set`, questionSetValue);\r\n            localStorage.setItem(\"mode\", questionsToFilterOut);\r\n        }\r\n\r\n        localStorage.setItem(\"shouldReshowUnknown\", reshowQuestions.toString());\r\n\r\n        dispatch(\"settingsClosed\", wasSettingsUpdated);\r\n    };\r\n</script>\r\n\r\n<section id=\"settings-section\">\r\n    <form>\r\n        <p class=\"settings-category\"><b>Question set</b></p>\r\n        {#each questionSetHandler.getQuestionSets() as questionSet}\r\n            <label for={questionSet.description}>\r\n                <input\r\n                    type=\"radio\"\r\n                    id={questionSet.description}\r\n                    name=\"question-set\"\r\n                    value={questionSet.description}\r\n                    bind:group={questionSetValue}\r\n                />\r\n                <!-- Ignore this error -->\r\n                {questionSet.description} ({questionSet.questions.length})\r\n            </label>\r\n        {/each}\r\n\r\n        <p class=\"settings-category\"><b>Filter out</b></p>\r\n        <label for=\"show-all-mode\">\r\n            <input\r\n                type=\"radio\"\r\n                id=\"show-all-mode\"\r\n                name=\"mode\"\r\n                value=\"Show all mode\"\r\n                bind:group={questionsToFilterOut}\r\n            />\r\n            Do not hide any questions\r\n        </label>\r\n        <label for=\"show-unseen-mode\">\r\n            <input\r\n                type=\"radio\"\r\n                id=\"show-unseen-mode\"\r\n                name=\"mode\"\r\n                value=\"Show unseen mode\"\r\n                bind:group={questionsToFilterOut}\r\n            />\r\n            Hide questions I've already seen\r\n        </label>\r\n        <label for=\"show-unknown-mode\">\r\n            <input\r\n                type=\"radio\"\r\n                id=\"show-unknown-mode\"\r\n                name=\"mode\"\r\n                value=\"Show unknown mode\"\r\n                bind:group={questionsToFilterOut}\r\n            />\r\n            Hide questions I've gotten right >60% of the time\r\n        </label>\r\n\r\n        <p class=\"settings-category\"><b>Extra settings</b></p>\r\n        <label for=\"reshow-unknown\">\r\n            <input\r\n                type=\"checkbox\"\r\n                id=\"reshow-unknown\"\r\n                name=\"reshow-unknwon\"\r\n                value=\"Re-show unknown\"\r\n                bind:checked={reshowQuestions}\r\n            />\r\n            Show questions I've gotten wrong more often\r\n        </label>\r\n        <button on:click|preventDefault={handleSaveSettings} id=\"exit\">Exit</button>\r\n    </form>\r\n</section>\r\n\r\n<style>\r\n    #settings-section {\r\n        background: var(--background);\r\n        height: 100%;\r\n        width: 100%;\r\n        max-width: calc(500px - 1px);\r\n        position: absolute;\r\n        left: 50%;\r\n        transform: translate(-50%, 0);\r\n        z-index: 999;\r\n    }\r\n    input[type=\"radio\"],\r\n    input[type=\"checkbox\"] {\r\n        margin: 0 6px;\r\n    }\r\n    label {\r\n        padding-bottom: 16px;\r\n    }\r\n    .settings-category {\r\n        margin: 0 0 5px 5px;\r\n    }\r\n    form {\r\n        padding: 12px;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    export let numQuestionsAnswered: number;\r\n    export let numEligibleQuestions: number;\r\n</script>\r\n\r\n<section id=\"top-bar\">\r\n    <p id=\"counter\">{numQuestionsAnswered}/{numEligibleQuestions}</p>\r\n\r\n    <svg id=\"settings-icon\" on:click height=\"24px\" viewBox=\"0 0 24 24\" width=\"24px\">\r\n        <g>\r\n            <path d=\"M0,0h24v24H0V0z\" fill=\"none\" />\r\n            <path\r\n                d=\"M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z\"\r\n            />\r\n        </g>\r\n    </svg>\r\n</section>\r\n\r\n<style>\r\n    #settings-icon {\r\n        float: right;\r\n        margin: -2px -3px 0 0;\r\n        height: 18px;\r\n        cursor: pointer;\r\n        opacity: 50%;\r\n    }\r\n    svg {\r\n        fill: var(--foreground);\r\n    }\r\n    #counter {\r\n        opacity: 50%;\r\n        margin: 0;\r\n        font-size: 12px;\r\n        width: fit-content;\r\n        float: left;\r\n    }\r\n    #top-bar {\r\n        height: 26px;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import Results from \"./Results.svelte\";\r\n    import Settings from \"./Settings.svelte\";\r\n    import TopBar from \"./TopBar.svelte\";\r\n    import * as storage from \"./storage\";\r\n    import { QuestionSetHandler } from \"./QuestionSetHandler\";\r\n\r\n    export let questionSetHandler: QuestionSetHandler;\r\n    let numQuestionsAnswered: number;\r\n    let numEligibleQuestions: number;\r\n    let currentKey: string;\r\n    let showSettings = false;\r\n    let showResults = false;\r\n    let stats: storage.Stats | null;\r\n    let wasCorrectAnswer: boolean;\r\n\r\n    const updateQuestion = (): void => {\r\n        currentKey = questionSetHandler.getNextQuestion();\r\n        numQuestionsAnswered = questionSetHandler.numNonReshownQuestionsAnswered;\r\n        numEligibleQuestions = questionSetHandler.numEligibleQuestions;\r\n    };\r\n\r\n    const handleNext = (): void => {\r\n        updateQuestion();\r\n        showResults = false;\r\n    };\r\n\r\n    const handleSubmit = (event: Event): void => {\r\n        const form = event.target as HTMLFormElement;\r\n        const userInput = (form.input as HTMLInputElement).value;\r\n\r\n        wasCorrectAnswer = questionSetHandler.isCorrectAnswer(currentKey, userInput);\r\n        storage.setStats(currentKey, wasCorrectAnswer, userInput, questionSetHandler.getOfficialGuess);\r\n        showResults = true;\r\n        stats = storage.getStats(currentKey);\r\n    };\r\n\r\n    const handleSettingsClosed = (event: CustomEvent<boolean>): void => {\r\n        const wasSettingsUpdated = event.detail;\r\n\r\n        if (wasSettingsUpdated) {\r\n            questionSetHandler.recalculateEligibleQuestions();\r\n            updateQuestion();\r\n            showResults = false;\r\n        }\r\n\r\n        showSettings = false;\r\n    };\r\n\r\n    const handleShowSettings = (): void => {\r\n        showSettings = true;\r\n    };\r\n\r\n    questionSetHandler.recalculateEligibleQuestions();\r\n    updateQuestion();\r\n</script>\r\n\r\n{#if showSettings}\r\n    <Settings on:settingsClosed={handleSettingsClosed} {questionSetHandler} />\r\n{/if}\r\n\r\n<section\r\n    id=\"quiz-section\"\r\n    class:quiz-section-input={!showResults}\r\n    class:success-animation={showResults && wasCorrectAnswer}\r\n    class:error-animation={showResults && !wasCorrectAnswer}\r\n>\r\n    <TopBar {numQuestionsAnswered} {numEligibleQuestions} on:click={handleShowSettings} />\r\n    <slot name=\"question\" {currentKey} isResult={showResults} />\r\n    {#if showResults}\r\n        <Results {questionSetHandler} {wasCorrectAnswer} {currentKey} {stats} let:keys on:click={handleNext}>\r\n            <slot name=\"answer\" slot=\"answer\" currentKey={keys} />\r\n            <slot name=\"previous-answer\" slot=\"previous-answer\" currentKey={keys} />\r\n        </Results>\r\n    {:else}\r\n        <!-- svelte-ignore a11y-autofocus -->\r\n        <form on:submit|preventDefault={handleSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                id=\"input\"\r\n                title=\"Guess the {questionSetHandler.questionType.toLowerCase()}\"\r\n                autocomplete=\"off\"\r\n                autofocus\r\n            />\r\n            <button id=\"submit-button\">Submit</button>\r\n        </form>\r\n    {/if}\r\n</section>\r\n\r\n<style>\r\n    :root {\r\n        color-scheme: light dark;\r\n    }\r\n    @media (prefers-color-scheme: dark) {\r\n        :root {\r\n            --background-background: black;\r\n            --background: #272727;\r\n            --foreground: white;\r\n            --success: #1b5e20;\r\n            --failure: #b71c1c;\r\n            --border-color: #555555;\r\n        }\r\n\r\n        :global(input),\r\n        :global(button) {\r\n            background-color: #3b3b3b;\r\n            color: var(--foreground);\r\n        }\r\n    }\r\n    @media (prefers-color-scheme: light) {\r\n        :root {\r\n            --background-background: white;\r\n            --background: #cfd8dc;\r\n            --foreground: black;\r\n            --success: #4caf50;\r\n            --failure: #f44336;\r\n            --border-color: darkgray;\r\n        }\r\n    }\r\n\r\n    :global(html),\r\n    :global(body) {\r\n        height: 100%;\r\n        margin: 0;\r\n    }\r\n    :global(label) {\r\n        display: block;\r\n    }\r\n    :global(input),\r\n    :global(button) {\r\n        box-sizing: border-box;\r\n        border: solid var(--border-color) 1px;\r\n    }\r\n    :global(button) {\r\n        width: 100%;\r\n        height: 35px;\r\n        border-radius: 7px;\r\n        cursor: pointer;\r\n    }\r\n\r\n    #quiz-section {\r\n        background: var(--background);\r\n        padding: 12px;\r\n    }\r\n    .quiz-section-input {\r\n        height: calc(100% - 24px);\r\n    }\r\n    input[type=\"text\"] {\r\n        height: 35px;\r\n        border-radius: 7px;\r\n    }\r\n    input[type=\"text\"] {\r\n        width: calc(100%);\r\n        margin-top: 12px;\r\n        margin-bottom: 12px;\r\n        padding-left: 7px;\r\n    }\r\n    #input {\r\n        padding-top: 0px;\r\n        padding-bottom: 0px;\r\n    }\r\n\r\n    @keyframes error-animation {\r\n        from {\r\n            color: var(--failure);\r\n        }\r\n        to {\r\n            color: unset;\r\n        }\r\n    }\r\n    .error-animation {\r\n        animation-name: error-animation;\r\n        animation-duration: 3s;\r\n    }\r\n    @keyframes success-animation {\r\n        from {\r\n            color: var(--success);\r\n        }\r\n        to {\r\n            color: unset;\r\n        }\r\n    }\r\n    .success-animation {\r\n        animation-name: success-animation;\r\n        animation-duration: 3s;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import { getTeamInfo, NflTeam } from \"./data\";\r\n    import { questionSetHandler as x } from \"./StadiumQuestionSetHandler\";\r\n    import Content from \"../../generic/Content.svelte\";\r\n\r\n    const questionSetHandler = x;\r\n\r\n    const getShortTeamNameFromKey = (key: string): string => {\r\n        const team = NflTeam[key as keyof typeof NflTeam];\r\n        return getTeamInfo(team).teamNames[1];\r\n    };\r\n\r\n    const getLongTeamNameFromKey = (key: string): string => {\r\n        const team = NflTeam[key as keyof typeof NflTeam];\r\n        return getTeamInfo(team).teamNames[0];\r\n    };\r\n\r\n    const getStadiumNameFromKey = (key: string): string => {\r\n        const team = NflTeam[key as keyof typeof NflTeam];\r\n        return getTeamInfo(team).stadiumNames[0];\r\n    };\r\n\r\n    const getStadiumLocationFromKey = (key: string): string => {\r\n        const team = NflTeam[key as keyof typeof NflTeam];\r\n        return getTeamInfo(team).cityNames[0];\r\n    };\r\n</script>\r\n\r\n<Content {questionSetHandler} let:currentKey>\r\n    <span slot=\"question\">\r\n        What is the stadium name for\r\n        <span class=\"team-name\">the {getShortTeamNameFromKey(currentKey)}</span>?\r\n    </span>\r\n    <span slot=\"answer\">\r\n        <span class=\"team-name\">The {getLongTeamNameFromKey(currentKey[0])}</span>\r\n        {#if currentKey[1]}\r\n            and <span class=\"team-name\">the {getLongTeamNameFromKey(currentKey[1])}</span>\r\n        {/if}are at <span class=\"stadium-name\">{getStadiumNameFromKey(currentKey[0])}</span>\r\n        in <span class=\"city-name\">{getStadiumLocationFromKey(currentKey[0])}</span>.\r\n    </span>\r\n    <span slot=\"previous-answer\">\r\n        <span class=\"team-name\">The {getLongTeamNameFromKey(currentKey[0])}</span>\r\n        {#if currentKey[1]}\r\n            and <span class=\"team-name\">the {getLongTeamNameFromKey(currentKey[1])}</span>\r\n        {/if}are at <span class=\"stadium-name\">{getStadiumNameFromKey(currentKey[0])}</span>\r\n        in <span class=\"city-name\">{getStadiumLocationFromKey(currentKey[0])}</span>.\r\n    </span>\r\n</Content>\r\n\r\n<style>\r\n    .team-name {\r\n        font-weight: bold;\r\n        color: red;\r\n    }\r\n    .stadium-name {\r\n        font-weight: bold;\r\n        color: blue;\r\n    }\r\n    .city-name {\r\n        font-weight: bold;\r\n        color: green;\r\n    }\r\n</style>\r\n","import { QuestionSetHandler } from \"../QuestionSetHandler\";\r\nimport { areStringsSimilar, standardizeString } from \"../strings\";\r\nexport class GenericQuestionSetHandler extends QuestionSetHandler {\r\n    constructor(questionType, answerType, \r\n    /**\r\n     * key = A key representing the question shown to the user\r\n     *\r\n     * value = A list of possible answers. NOTE: The first string in this list\r\n     *         will be used to display the answer to the user in the results page.\r\n     *\r\n     * e.g.\r\n     *      key = URL of image of flag of the United States\r\n     *\r\n     *      value = [\"United States of America\", \"United States\", \"USA\", \"US\"]\r\n     */\r\n    allData) {\r\n        super();\r\n        this.questionType = questionType;\r\n        this.answerType = answerType;\r\n        this.allData = allData;\r\n        this.doesGuessExist = (guess) => {\r\n            return this.getOfficialGuess(guess) != undefined;\r\n        };\r\n        this.isCorrectAnswer = (currentKey, userInput) => {\r\n            const possibleAnswers = this.allData.get(currentKey);\r\n            for (let i = 0; i < possibleAnswers.length; i++) {\r\n                if (areStringsSimilar(possibleAnswers[i], userInput)) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        };\r\n        this.getQuestionSets = () => {\r\n            return [\r\n                {\r\n                    description: \"All\",\r\n                    questions: [...this.allData.keys()],\r\n                },\r\n            ];\r\n        };\r\n        /* ##################################\r\n         * CONVERTERS\r\n         * TODO make this nicer later\r\n         * ##################################\r\n         */\r\n        /** Used to convert a key (question) into an answer shown in the results screen */\r\n        this.convertKeyToOfficialGuess = (key) => {\r\n            return this.allData.get(key)[0];\r\n        };\r\n        /** Used to determine if a guess exists, and also used to standardize a guess when\r\n         * storing incorrect guesses in local storage\r\n         */\r\n        this.getOfficialGuess = (guess) => {\r\n            return this.possibleGuessToOfficialGuess.get(standardizeString(guess));\r\n        };\r\n        this.possibleGuessToOfficialGuess = (() => {\r\n            const result = new Map();\r\n            const allKeys = [...this.allData.keys()];\r\n            for (let i = 0; i < allKeys.length; i++) {\r\n                const questionKey = allKeys[i];\r\n                const possibleAnswers = this.allData.get(questionKey);\r\n                possibleAnswers.forEach((answer) => result.set(standardizeString(answer), possibleAnswers[0]));\r\n            }\r\n            return result;\r\n        })();\r\n        /** Used to show the actual question for whatever the user guessed */\r\n        this.getKeysFromGuess = (guess) => {\r\n            const officializedGuess = this.getOfficialGuess(guess);\r\n            if (officializedGuess) {\r\n                return this.getAllAssociatedKeys(this.officalGuessToKey.get(officializedGuess));\r\n            }\r\n            else {\r\n                return [];\r\n            }\r\n        };\r\n        this.officalGuessToKey = (() => {\r\n            const result = new Map();\r\n            const allKeys = [...this.allData.keys()];\r\n            for (let i = 0; i < allKeys.length; i++) {\r\n                const questionKey = allKeys[i];\r\n                const possibleAnswers = this.allData.get(questionKey);\r\n                result.set(possibleAnswers[0], questionKey);\r\n            }\r\n            return result;\r\n        })();\r\n    }\r\n}\r\n","import { GenericQuestionSetHandler } from \"./GenericQuestionSetHandler\";\r\nexport class GenericImageQuestionSetHandler extends GenericQuestionSetHandler {\r\n    constructor(questionType, answerType, allData) {\r\n        super(questionType, answerType, allData);\r\n        this.questionType = questionType;\r\n        this.answerType = answerType;\r\n        this.allData = allData;\r\n        this.convertKeyToOfficialGuess = (key) => {\r\n            return key.split(\"/\")[2].split(\".\")[0].split(\",\")[0];\r\n        };\r\n        /** Returns the keys for other images associated with the same question.\r\n         * i.e. If \"Evergreen tree\" has images \"Evergreen Tree.webp\",\r\n         * \"Evergreen Tree (2).webp\", \"Evergreen Tree (3).webp\", this function\r\n         * will return all of those images. `key` will always be first in the\r\n         * returned list.\r\n         */\r\n        this.getAllAssociatedKeys = (key) => {\r\n            const standardizedKey = key.split(\".\")[0].split(\"(\")[0].trim();\r\n            const allKeys = Array.from(this.allData.keys());\r\n            const result = [key];\r\n            for (let i = 0; i < allKeys.length; i++) {\r\n                const standardizedOtherKey = allKeys[i].split(\".\")[0].split(\"(\")[0].trim();\r\n                if (standardizedKey === standardizedOtherKey && allKeys[i] !== key) {\r\n                    result.push(allKeys[i]);\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n        this.preload = (imageArray, index) => {\r\n            index = index || 0;\r\n            if (imageArray && imageArray.length > index) {\r\n                const img = new Image();\r\n                img.onload = () => {\r\n                    this.preload(imageArray, index + 1);\r\n                };\r\n                img.src = imageArray[index];\r\n            }\r\n        };\r\n    }\r\n}\r\n","<script lang=\"ts\">\r\n    import { GenericImageQuestionSetHandler } from \"./GenericImageQuestionSetHandler\";\r\n    import Content from \"../Content.svelte\";\r\n\r\n    export let triviaCategory: string;\r\n    export let questionType: string;\r\n    export let files: string[];\r\n\r\n    const getAnswer = (keys: string[]): string => {\r\n        return questionSetHandler.convertKeyToOfficialGuess(keys[0]);\r\n    };\r\n\r\n    const allData = ((): Map<string, string[]> => {\r\n        const result: Map<string, string[]> = new Map();\r\n\r\n        for (let i = 0; i < files.length; i++) {\r\n            const questionKey = files[i];\r\n            const possibleAnswers = questionKey.split(\"/\")[2].split(\".\")[0].split(\",\");\r\n            result.set(questionKey, possibleAnswers);\r\n        }\r\n\r\n        return result;\r\n    })();\r\n\r\n    const questionSetHandler = new GenericImageQuestionSetHandler(triviaCategory, questionType, allData);\r\n    questionSetHandler.preload(files, 0);\r\n\r\n    // Workaround for iOS: https://github.com/andrewshumate/trivia/issues/1\r\n    let visualViewportHeight = visualViewport.height;\r\n    visualViewport.onresize = (): void => {\r\n        visualViewportHeight = visualViewport.height;\r\n        window.scrollTo(0, 0);\r\n    };\r\n    window.onscroll = (): void => {\r\n        window.scrollTo(0, 0);\r\n    };\r\n</script>\r\n\r\n<Content {questionSetHandler} let:currentKey let:isResult>\r\n    <span slot=\"question\">\r\n        <img\r\n            style={`max-height: calc(${visualViewportHeight}px - 145px)`}\r\n            class=\"image\"\r\n            class:medium-image={isResult}\r\n            src={currentKey}\r\n            alt={questionSetHandler.questionType}\r\n        />\r\n    </span>\r\n    <span slot=\"answer\">\r\n        The answer is <b>{getAnswer(currentKey)}</b>.\r\n        {#if currentKey.length > 1}\r\n            More photos:<br />\r\n            {#each currentKey as imageSrc}\r\n                {#if imageSrc !== currentKey[0]}\r\n                    <img class=\"mini-image\" src={imageSrc} alt={questionSetHandler.questionType} />\r\n                {/if}\r\n            {/each}\r\n        {/if}\r\n    </span>\r\n    <span slot=\"previous-answer\">\r\n        {getAnswer(currentKey)}:<br />\r\n        {#each currentKey as imageSrc}\r\n            <img class=\"mini-image\" src={imageSrc} alt={questionSetHandler.questionType} />\r\n        {/each}\r\n    </span>\r\n</Content>\r\n\r\n<style>\r\n    .image {\r\n        max-width: 100%;\r\n        margin-left: auto;\r\n        margin-right: auto;\r\n        display: block;\r\n    }\r\n    .medium-image {\r\n        max-height: 300px !important;\r\n    }\r\n    .mini-image {\r\n        max-width: 75px;\r\n        margin-right: 1em;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import { GenericQuestionSetHandler } from \"./GenericQuestionSetHandler\";\r\n    import Content from \"../Content.svelte\";\r\n\r\n    export let questionType: string;\r\n    export let answerType: string;\r\n    export let allData: Map<string, string[]>;\r\n\r\n    const questionSetHandler = new GenericQuestionSetHandler(questionType, answerType, allData);\r\n\r\n    const getAnswer = (keys: string[]): string => {\r\n        return questionSetHandler.convertKeyToOfficialGuess(keys[0]);\r\n    };\r\n</script>\r\n\r\n<Content {questionSetHandler} let:currentKey>\r\n    <slot name=\"question\" slot=\"question\" {currentKey} isResult={false}>\r\n        <p>{currentKey}</p>\r\n    </slot>\r\n    <slot name=\"answer\" slot=\"answer\">\r\n        The answer is <b>{getAnswer(currentKey)}</b>\r\n    </slot>\r\n    <slot name=\"previous-answer\" slot=\"previous-answer\" {currentKey}>\r\n        {getAnswer(currentKey)}:\r\n        {currentKey[0]}\r\n    </slot>\r\n</Content>\r\n","<script lang=\"ts\">\r\n    import GenericStringApp from \"../generic/generichandlers/GenericStringApp.svelte\";\r\n    import { shuffle } from \"../generic/utils\";\r\n\r\n    const questionType = \"Famous fivesome\";\r\n    const answerType = \"Name of group\";\r\n    const allData = new Map([\r\n        [\"Frank Sinatra, Dean Martin, Sammy Davis Jr, Peter Lawford, Joey Bishop\", [\"The Rat Pack\"]],\r\n        [\"Dave Foley, Kevin McDonald, Bruce McCulloch, Mark McKinney, Scott Thompson\", [\"Kids in the Hall\"]],\r\n        [\r\n            \"Jason Lee Scott, Kimberly Hart, Zack Taylor, Trini Kwan, Billy Cranston\",\r\n            [\"Original Mighty Morphin Power Rangers\", \"Mighty Morphin Power Rangers\"],\r\n        ],\r\n        [\"Iron Man, Hulk, Thor, Ant-Man, Wasp\", [\"Original Marvel Avengers\", \"Marvel Avengers\", \"Avengers\"]],\r\n        [\"Jackie, Tito, Jermaine, Marlon, Michael\", [\"The Jackson Five\", \"Jackson Five\", \"Jackson 5\"]],\r\n        [\"Sight, Smell, Touch, Taste, Hearing\", [\"The five senses\", \"Senses\"]],\r\n        [\"Atlantic, Arctic, Indian, Pacific, Southern\", [\"Oceans\"]],\r\n        [\"Genesis, Exodus, Leviticus, Numbers, Deuteronomy\", [\"Books of the Torah\", \"Torah\"]],\r\n        [\"Red, Blue, Green, Yellow, Black\", [\"Colors of the Olympic Rings\", \"Olympic Ring colors\"]],\r\n        [\r\n            \"Scooby-Doo, Norville 'Shaggy' Rogers, Fred Jones, Daphne Blake, Velma Dinkley\",\r\n            [\"Gang in the 'Mystery Machine'\", \"Mystery Machine gang\", \"Mystery Machine\"],\r\n        ],\r\n        [\"Denial, Anger, Bargaining, Depression, Acceptance\", [\"Stages of Grief\"]],\r\n        [\r\n            \"Victoria 'Posh' Beckham, Melanie 'Scary' Brown, Emma 'Baby' Bunton, Melanie 'Sporty' Chisholm, Geri 'Ginger' Halliwell\",\r\n            [\"Spice Girls\"],\r\n        ],\r\n        [\"Donnie Wahlberg,Danny Wood,Joey McIntyre,Jordan Knight,Jonathan Knight\", [\"New Kids on the Block\"]],\r\n        [\"Point Guard,Shooting Guard,Small Forward,Power Forward,Center\", [\"Basketball positions\"]],\r\n        [\"Exosphere,Thermosphere,Mesosphere,Stratosphere,Troposphere\", [\"Layers of the atmosphere\"]],\r\n        [\"Huron,Ontario,Michigan,Erie,Superior\", [\"Great Lakes\"]],\r\n        [\r\n            \"Main Street USA,Adventureland,Frontierland,Fantasyland,Tomorrowland\",\r\n            [\"Original Lands of Disneyland\", \"Lands of Disneyland\", \"Disneyland lands\"],\r\n        ],\r\n        [\r\n            \"Stadion (Foot Race),Wrestling,Long Jump,Javelin Throw,Discus Throw\",\r\n            [\r\n                \"Original Olympic Pentathlon Events\",\r\n                \"Olympic Pentathlon Events\",\r\n                \"Pentathlon Events\",\r\n                \"Olympic Pentathlon\",\r\n            ],\r\n        ],\r\n        [\"Steven Tyler, Tom Hamilton, Joey Kramer, Joe Perry, Brad Whitford\", [\"Aerosmith\"]],\r\n        [\"Sheldon, Leonard, Penny, Howard, Raj\", [\"Big Bang Theory\"]],\r\n        [\r\n            \"The Radio, Lampy, Blanky, Kirby, Toaster\",\r\n            [\"The appliances from The Brave Little Toaster\", \"The Brave Little Toaster\"],\r\n        ],\r\n        [\r\n            \"Matt, Mary, Lucy, Simon, Ruthie\",\r\n            [\"The Camden kids from 7th Heaven\", \"7th Heaven\", \"Seventh Heaven\", \"The Camden kids\"],\r\n        ],\r\n        [\"Roseanne, Dan, Becky, Darlene, DJ\", [\"The Conners\"]],\r\n        [\r\n            \"Sonny, Fredo, Michael, Connie, Tom\",\r\n            [\"The Corleone kids from The Godfather\", \"The Corleone kids\", \"The Corleones\"],\r\n        ],\r\n        [\"Muno, Foofa, Brobee, Toodee, Plex\", [\"The Yo Gabba Gabba! gang\", \"Yo Gabba Gabba\"]],\r\n        [\r\n            \"Dorothy, The Scarecrow, The Tin Man, The Cowardly Lion, Toto\",\r\n            [\"The Wizard of Oz travelers\", \"Wizard of Oz\"],\r\n        ],\r\n        [\r\n            \"Francis, Reese, Malcolm, Dewey, Jamie\",\r\n            [\"The Wilkerson boys from Malcolm in the Middle\", \"Wilkerson boys\", \"Malcolm in the Middle\"],\r\n        ],\r\n        [\"Todd Hockney, Michael McManus, Fred Fenster, Dean Keaton, Roger 'Verbal' Kint\", [\"The Unusual Suspects\"]],\r\n        [\"Homer, Marge, Bart, Lisa, Maggie\", [\"The Simpsons\"]],\r\n        [\"Bailey, Charlie, Julia, Claudia, Owen\", [\"The Salingers from 'Party of Five'\", \"Party of Five\"]],\r\n        [\"Mick Jagger, Keith Richards, Charlie Watts, Bill Wyman, Brian Jones\", [\"The Rolling Stones\"]],\r\n        [\r\n            \"Father, Mother, Fritz, Ernest, Francis\",\r\n            [\"The Swiss Robinson Family\", \"Swiss Family Robinson\", \"Swiss Robinsons\"],\r\n        ],\r\n        [\"John, Maureen, Judy, Penny, Will\", [\"The Robinsons from 'Lost in Space'\"]],\r\n        [\"Alan, Merrill, Wayne, Jay, Donny\", [\"The Osmonds\"]],\r\n        [\"Jane, Lisbon, Cho, Rigsby, Van Pelt\", [\"The original Mentalist team\", \"Mentalist\"]],\r\n        [\"Chico, Harpo, Groucho, Zeppo, Gummo\", [\"The Marx Brothers\"]],\r\n        [\"Sondra, Denise, Theo, Vanessa, Rudy\", [\"The Huxtable kids from 'The Cosby Show'\", \"Huxtables\"]],\r\n        [\"Frankie, Mike, Axl, Sue, Brick\", [\"The Hecks from 'The Middle'\", \"Hecks\"]],\r\n        [\"Ty, Claire, Haley, Alex, Luke\", [\"The Dunphys from 'Modern Family'\", \"Dunphys\", \"Dunphies\"]],\r\n        [\"Howard, Marion, Richie, Joanie, The Fonz\", [\"The Cunninghams from 'Happy Days'\", \"Cunninghams\"]],\r\n    ]);\r\n\r\n    const listifyString = (key: string): string[] => {\r\n        const list = key.split(\",\");\r\n        return shuffle(list);\r\n    };\r\n\r\n    const getFirstKey = (keys: string[]): string => {\r\n        return keys[0];\r\n    };\r\n\r\n    const getAnswer = (keys: string[]): string => {\r\n        return allData.get(keys[0])![0];\r\n    };\r\n</script>\r\n\r\n<GenericStringApp {questionType} {answerType} {allData} let:currentKey>\r\n    <span slot=\"question\">\r\n        <ul>\r\n            {#each listifyString(currentKey) as thing}\r\n                <li>{thing}</li>\r\n            {/each}\r\n        </ul>\r\n    </span>\r\n    <span slot=\"previous-answer\">\r\n        {getAnswer(currentKey)}:\r\n        <ul>\r\n            {#each listifyString(getFirstKey(currentKey)) as thing}\r\n                <li>{thing}</li>\r\n            {/each}\r\n        </ul>\r\n    </span>\r\n</GenericStringApp>\r\n\r\n<style>\r\n    ul {\r\n        margin: 0;\r\n    }\r\n</style>\r\n","<script lang=\"ts\">\r\n    import StadiumsApp from \"./categories/stadiums/StadiumsApp.svelte\";\r\n    import CarLogosApp from \"./categories/CarLogos.svelte\";\r\n    import PlaneMoviesApp from \"./categories/PlaneMoviesApp.svelte\";\r\n    import FivesomesApp from \"./categories/FivesomesApp.svelte\";\r\n    import AnagramsApp from \"./categories/AnagramsApp.svelte\";\r\n    import SportsTwoFirstNamesApp from \"./categories/SportsTwoFirstNamesApp.svelte\";\r\n    import CelebritySantasApp from \"./categories/CelebritySantasApp.svelte\";\r\n    import StateFlags from \"./categories/StateFlags.svelte\";\r\n    import StateCapitals from \"./categories/StateCapitals.svelte\";\r\n    import EuropeanOutlines from \"./categories/EuropeanOutlines.svelte\";\r\n\r\n    const nflStadiums = \"Stadiums\";\r\n    const carLogos = \"Car logos\";\r\n    const planeMovies = \"Movies\";\r\n    const fivesomes = \"Fivesomes\";\r\n    const anagrams = \"Anagrams\";\r\n    const sportsTwoFirstNames = \"Sports: Two first names\";\r\n    const celebritySantas = \"Celebrity santas\";\r\n    const stateFlags = \"State flags\";\r\n    const stateCapitals = \"State capitals\";\r\n    const europeanOutlines = \"European outlines\";\r\n\r\n    const tabs = [\r\n        europeanOutlines,\r\n        stateCapitals,\r\n        stateFlags,\r\n        celebritySantas,\r\n        sportsTwoFirstNames,\r\n        anagrams,\r\n        planeMovies,\r\n        fivesomes,\r\n        nflStadiums,\r\n        carLogos,\r\n    ];\r\n    let currentTab = localStorage.getItem(\"trivia-category\") ?? tabs[0];\r\n\r\n    const handleTabClick = (event: Event): void => {\r\n        const li = event.target as HTMLLIElement;\r\n        currentTab = li.innerText.trim();\r\n        localStorage.setItem(\"trivia-category\", currentTab);\r\n    };\r\n</script>\r\n\r\n<main>\r\n    <nav>\r\n        <ul>\r\n            {#each tabs as tab}\r\n                <li class:active-tab={tab === currentTab} on:click={handleTabClick}>\r\n                    {tab}\r\n                </li>\r\n            {/each}\r\n        </ul>\r\n    </nav>\r\n\r\n    {#if currentTab === carLogos}\r\n        <CarLogosApp />\r\n    {:else if currentTab === planeMovies}\r\n        <PlaneMoviesApp />\r\n    {:else if currentTab === nflStadiums}\r\n        <StadiumsApp />\r\n    {:else if currentTab === anagrams}\r\n        <AnagramsApp />\r\n    {:else if currentTab === fivesomes}\r\n        <FivesomesApp />\r\n    {:else if currentTab === sportsTwoFirstNames}\r\n        <SportsTwoFirstNamesApp />\r\n    {:else if currentTab === celebritySantas}\r\n        <CelebritySantasApp />\r\n    {:else if currentTab === stateFlags}\r\n        <StateFlags />\r\n    {:else if currentTab === stateCapitals}\r\n        <StateCapitals />\r\n    {:else if currentTab === europeanOutlines}\r\n        <EuropeanOutlines />\r\n    {/if}\r\n</main>\r\n\r\n<style>\r\n    :global(html, body) {\r\n        -webkit-overflow-scrolling: touch !important;\r\n        overflow: auto !important;\r\n        height: 100% !important;\r\n    }\r\n    :global(body) {\r\n        background: var(--background-background);\r\n        color: var(--foreground);\r\n        font-family: sans-serif;\r\n    }\r\n    main {\r\n        background: var(--background);\r\n        padding: 0;\r\n        height: 100%;\r\n        max-width: 500px;\r\n        margin: auto;\r\n    }\r\n    nav {\r\n        display: flex;\r\n        justify-content: center;\r\n        width: 100%;\r\n        max-width: 500px;\r\n        position: absolute;\r\n    }\r\n    ul {\r\n        margin: 8px 34px 0px 44px;\r\n        padding: 0;\r\n        list-style-type: none;\r\n        white-space: nowrap;\r\n        overflow-x: scroll;\r\n        overflow-y: hidden;\r\n        scrollbar-width: none;\r\n    }\r\n    ul::-webkit-scrollbar {\r\n        background: transparent;\r\n        width: 0px;\r\n    }\r\n    li {\r\n        list-style: none;\r\n        display: inline;\r\n        margin: 0 3px;\r\n        font-size: 12px;\r\n        opacity: 50%;\r\n        cursor: pointer;\r\n    }\r\n    .active-tab {\r\n        color: #d91b42;\r\n        border-bottom: 2px solid #d91b42;\r\n        opacity: 100%;\r\n    }\r\n</style>\r\n","import App from \"./App.svelte\";\r\nconst app = new App({\r\n    target: document.body,\r\n});\r\nexport default app;\r\n"],"names":["noop","run","fn","blank_object","Object","create","run_all","fns","forEach","is_function","thing","safe_not_equal","a","b","src_url_equal_anchor","current_component","src_url_equal","element_src","url","document","createElement","href","create_slot","definition","ctx","$$scope","slot_ctx","get_slot_context","tar","src","k","assign","slice","get_slot_changes","dirty","lets","undefined","merged","len","Math","max","length","i","update_slot_base","slot","slot_definition","slot_changes","get_slot_context_fn","slot_context","p","get_all_dirty_from_scope","append","target","node","appendChild","insert","anchor","insertBefore","detach","parentNode","removeChild","destroy_each","iterations","detaching","d","element","name","svg_element","createElementNS","text","data","createTextNode","space","empty","listen","event","handler","options","addEventListener","removeEventListener","prevent_default","preventDefault","call","this","attr","attribute","value","removeAttribute","getAttribute","setAttribute","set_data","wholeText","toggle_class","toggle","classList","set_current_component","component","createEventDispatcher","Error","get_current_component","type","detail","callbacks","$$","bubbles","e","createEvent","initCustomEvent","custom_event","bubble","dirty_components","binding_callbacks","render_callbacks","flush_callbacks","resolved_promise","Promise","resolve","update_scheduled","add_render_callback","push","flushing","seen_callbacks","Set","flush","update","pop","callback","has","add","clear","fragment","before_update","after_update","outroing","outros","group_outros","r","c","check_outros","transition_in","block","local","delete","transition_out","o","create_component","mount_component","customElement","on_mount","on_destroy","m","new_on_destroy","map","filter","destroy_component","make_dirty","then","fill","init","instance","create_fragment","not_equal","props","append_styles","parent_component","bound","on_disconnect","context","Map","skip_bound","root","ready","ret","rest","hydrate","nodes","Array","from","childNodes","children","l","intro","SvelteComponent","$destroy","$on","index","indexOf","splice","$set","$$props","obj","$$set","keys","areStringsSimilar","s1","s2","getStringSimilarity","standardizeString","levenshteinDistance","wordsToIgnore","s","toLowerCase","split","word","includes","join","replace","_min","d0","d1","d2","bx","ay","tmp","la","lb","charCodeAt","offset","y","d3","dy","bx0","bx1","bx2","bx3","x","dd","vector","NflTeam","getTeamInfo","teamName","LAS_VEGAS_RAIDERS","stadiumNames","cityNames","teamNames","KANSAS_CITY_CHIEFS","DALLAS_COWBOYS","CAROLINA_PANTHERS","NEW_ORLEANS_SAINTS","DENVER_BRONCOS","WASHINGTON_FOOTBALL_TEAM","CLEVELAND_BROWNS","DETROIT_LIONS","NEW_ENGLAND_PATRIOTS","MIAMI_DOLPHINS","PITTSBURGH_STEELERS","BUFFALO_BILLS","GREEN_BAY_PACKERS","SAN_FRANCISCO_49ERS","PHILADELPHIA_EAGLES","INDIANAPOLIS_COLTS","SEATTLE_SEAHAWKS","BALTIMORE_RAVENS","ATLANTA_FALCONS","NEW_YORK_GIANTS","NEW_YORK_JETS","TENNESSEE_TITANS","HOUSTON_TEXANS","CINCINNATI_BENGALS","TAMPA_BAY_BUCCANEERS","LOS_ANGELES_RAMS","LOS_ANGELES_CHARGERS","CHICAGO_BEARS","ARIZONA_CARDINALS","JACKSONVILLE_JAGUARS","MINNESOTA_VIKINGS","NFL_MEXICO_GAME","HALL_OF_FAME_GAME","NFL_LONDON_GAME","NFL_LONDON_GAME2","allKeys","values","possibleGuessToOfficialGuess","result","teamInfo","j","set","shuffle","array","randomIndex","currentIndex","floor","random","getStats","key","statsString","localStorage","getItem","JSON","parse","getQuestionSetString","triviaCategory","getMode","getShouldReshowUnknown","QuestionSetHandler","constructor","getAllAssociatedKeys","getQuestionSet","questionSetString","questionSets","getQuestionSets","description","questions","recalculateEligibleQuestions","mode","storage.getMode","questionSet","storage.getQuestionSetString","questionType","seenQuestions","question","stats","storage.getStats","percentCorrect","numCorrectGuesses","eligibleQuestions","numNonReshownQuestionsAnswered","numAllQuestionsAnswered","numEligibleQuestions","getNextQuestion","currentQuestion","storage.getShouldReshowUnknown","questionSetHandler","super","arguments","answerType","doesGuessExist","guess","getOfficialGuess","getKeysFromGuess","officializedGuess","guessToKeys","isCorrectAnswer","currentKey","userInput","get","team","numTotalGuesses","toFixed","incorrectGuesses","questionSetValue","questionsToFilterOut","reshowQuestions","numQuestionsAnswered","wasGuessCorrect","numIncorrectGuesses","standardizedGuess","trim","setItem","stringify","GenericQuestionSetHandler","allData","possibleAnswers","convertKeyToOfficialGuess","questionKey","answer","officalGuessToKey","GenericImageQuestionSetHandler","standardizedKey","preload","imageArray","img","Image","onload","carLogos","planeMovies","nflStadiums","anagrams","fivesomes","sportsTwoFirstNames","celebritySantas","stateFlags","stateCapitals","europeanOutlines","body"],"mappings":"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"}